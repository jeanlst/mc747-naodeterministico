
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Jun 19 20:05:12 GMT-03:00 2008
//----------------------------------------------------

package pl747.sintatico;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;

import pl747.PL747Consts;
import pl747.TreeNode;
import pl747.TreeNodeFactory;
import pl747.semantico.AbsNodeFactory;
import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Jun 19 20:05:12 GMT-03:00 2008
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\173\000\002\062\002\000\002\037\004\000\002\002" +
    "\004\000\002\057\003\000\002\057\004\000\002\061\003" +
    "\000\002\061\003\000\002\061\004\000\002\061\003\000" +
    "\002\061\003\000\002\004\005\000\002\004\005\000\002" +
    "\002\003\000\002\002\004\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\012\003" +
    "\000\002\012\004\000\002\041\003\000\002\041\005\000" +
    "\002\005\003\000\002\005\005\000\002\043\005\000\002" +
    "\043\005\000\002\043\006\000\002\043\006\000\002\013" +
    "\006\000\002\044\005\000\002\044\005\000\002\044\006" +
    "\000\002\044\006\000\002\052\003\000\002\052\005\000" +
    "\002\007\007\000\002\007\007\000\002\010\003\000\002" +
    "\010\004\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\011\005\000\002\042\003" +
    "\000\002\042\003\000\002\042\005\000\002\042\005\000" +
    "\002\022\005\000\002\006\003\000\002\006\003\000\002" +
    "\014\003\000\002\014\005\000\002\015\003\000\002\015" +
    "\005\000\002\016\003\000\002\016\004\000\002\016\005" +
    "\000\002\017\003\000\002\017\005\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\005\000\002\020\004\000\002\053\003\000\002\053" +
    "\003\000\002\054\003\000\002\054\003\000\002\054\003" +
    "\000\002\054\003\000\002\054\003\000\002\054\003\000" +
    "\002\055\003\000\002\055\003\000\002\056\003\000\002" +
    "\056\003\000\002\056\003\000\002\023\003\000\002\023" +
    "\005\000\002\025\004\000\002\025\005\000\002\025\003" +
    "\000\002\051\005\000\002\051\006\000\002\027\007\000" +
    "\002\027\011\000\002\026\003\000\002\026\003\000\002" +
    "\030\004\000\002\030\003\000\002\030\004\000\002\030" +
    "\003\000\002\030\003\000\002\030\003\000\002\030\003" +
    "\000\002\030\003\000\002\031\005\000\002\050\003\000" +
    "\002\050\004\000\002\032\007\000\002\032\011\000\002" +
    "\032\012\000\002\032\012\000\002\060\003\000\002\035" +
    "\010\000\002\040\007\000\002\040\010\000\002\036\007" +
    "\000\002\046\003\000\002\046\002\000\002\045\003\000" +
    "\002\045\005\000\002\034\004\000\002\034\005\000\002" +
    "\021\004\000\002\021\005\000\002\024\006\000\002\024" +
    "\005\000\002\047\003\000\002\047\005\000\002\033\006" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\351\000\020\044\001\045\001\046\001\047\001\050" +
    "\001\051\001\052\001\001\002\000\020\044\012\045\025" +
    "\046\013\047\014\050\020\051\030\052\023\001\002\000" +
    "\004\002\006\001\002\000\004\002\uffff\001\002\000\022" +
    "\002\000\044\012\045\025\046\013\047\014\050\020\051" +
    "\030\052\023\001\002\000\010\010\276\052\ufff5\055\ufff5" +
    "\001\002\000\006\052\342\055\341\001\002\000\004\014" +
    "\317\001\002\000\012\010\ufff3\012\ufff3\052\ufff3\055\ufff3" +
    "\001\002\000\012\010\ufff2\012\ufff2\052\ufff2\055\ufff2\001" +
    "\002\000\022\002\ufffb\044\ufffb\045\ufffb\046\ufffb\047\ufffb" +
    "\050\ufffb\051\ufffb\052\ufffb\001\002\000\022\002\ufffe\044" +
    "\ufffe\045\ufffe\046\ufffe\047\ufffe\050\ufffe\051\ufffe\052\ufffe" +
    "\001\002\000\006\010\276\055\uffef\001\002\000\012\010" +
    "\ufff0\012\ufff0\052\ufff0\055\ufff0\001\002\000\022\002\ufff8" +
    "\044\ufff8\045\ufff8\046\ufff8\047\ufff8\050\ufff8\051\ufff8\052" +
    "\ufff8\001\002\000\004\004\315\001\002\000\004\012\173" +
    "\001\002\000\004\055\060\001\002\000\004\055\031\001" +
    "\002\000\022\002\ufffc\044\ufffc\045\ufffc\046\ufffc\047\ufffc" +
    "\050\ufffc\051\ufffc\052\ufffc\001\002\000\022\002\ufff9\044" +
    "\ufff9\045\ufff9\046\ufff9\047\ufff9\050\ufff9\051\ufff9\052\ufff9" +
    "\001\002\000\012\010\ufff1\012\ufff1\052\ufff1\055\ufff1\001" +
    "\002\000\004\007\032\001\002\000\020\014\034\017\033" +
    "\054\037\055\042\056\041\057\035\060\036\001\002\000" +
    "\004\054\055\001\002\000\020\014\034\017\033\054\037" +
    "\055\050\056\041\057\035\060\036\001\002\000\054\004" +
    "\uffd8\005\uffd8\011\uffd8\013\uffd8\015\uffd8\016\uffd8\017\uffd8" +
    "\020\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8\026\uffd8\027" +
    "\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8\037\uffd8\041\uffd8" +
    "\042\uffd8\001\002\000\054\004\uffd7\005\uffd7\011\uffd7\013" +
    "\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7" +
    "\023\uffd7\024\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032" +
    "\uffd7\033\uffd7\037\uffd7\041\uffd7\042\uffd7\001\002\000\054" +
    "\004\uffdc\005\uffdc\011\uffdc\013\uffdc\015\uffdc\016\uffdc\017" +
    "\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc\026\uffdc" +
    "\027\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\037\uffdc\041" +
    "\uffdc\042\uffdc\001\002\000\004\004\045\001\002\000\054" +
    "\004\uffd9\005\uffd9\011\uffd9\013\uffd9\015\uffd9\016\uffd9\017" +
    "\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9\026\uffd9" +
    "\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\037\uffd9\041" +
    "\uffd9\042\uffd9\001\002\000\004\004\044\001\002\000\054" +
    "\004\uffda\005\uffda\011\uffda\013\uffda\015\uffda\016\uffda\017" +
    "\uffda\020\uffda\021\uffda\022\uffda\023\uffda\024\uffda\026\uffda" +
    "\027\uffda\030\uffda\031\uffda\032\uffda\033\uffda\037\uffda\041" +
    "\uffda\042\uffda\001\002\000\022\002\uffdd\044\uffdd\045\uffdd" +
    "\046\uffdd\047\uffdd\050\uffdd\051\uffdd\052\uffdd\001\002\000" +
    "\022\002\uffde\044\uffde\045\uffde\046\uffde\047\uffde\050\uffde" +
    "\051\uffde\052\uffde\001\002\000\006\005\uffd5\015\uffd5\001" +
    "\002\000\006\005\051\015\052\001\002\000\006\005\uffd4" +
    "\015\uffd4\001\002\000\020\014\034\017\033\054\037\055" +
    "\054\056\041\057\035\060\036\001\002\000\054\004\uffd6" +
    "\005\uffd6\011\uffd6\013\uffd6\015\uffd6\016\uffd6\017\uffd6\020" +
    "\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6\026\uffd6\027\uffd6" +
    "\030\uffd6\031\uffd6\032\uffd6\033\uffd6\037\uffd6\041\uffd6\042" +
    "\uffd6\001\002\000\006\005\uffd2\015\uffd2\001\002\000\006" +
    "\005\uffd3\015\uffd3\001\002\000\054\004\uffdb\005\uffdb\011" +
    "\uffdb\013\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb" +
    "\022\uffdb\023\uffdb\024\uffdb\026\uffdb\027\uffdb\030\uffdb\031" +
    "\uffdb\032\uffdb\033\uffdb\037\uffdb\041\uffdb\042\uffdb\001\002" +
    "\000\006\004\uffed\005\uffed\001\002\000\006\004\171\005" +
    "\170\001\002\000\010\004\uffeb\005\uffeb\007\061\001\002" +
    "\000\036\012\071\014\034\016\064\017\076\025\066\046" +
    "\013\047\014\050\020\051\030\054\037\055\077\056\041" +
    "\057\035\060\036\001\002\000\044\004\uffcc\005\uffcc\011" +
    "\uffcc\013\uffcc\016\064\017\155\023\uffcc\024\uffcc\026\161" +
    "\027\160\030\163\031\162\032\165\033\156\037\uffcc\041" +
    "\uffcc\042\uffcc\001\002\000\004\012\152\001\002\000\034" +
    "\012\uffb7\014\uffb7\017\uffb7\025\uffb7\046\uffb7\047\uffb7\050" +
    "\uffb7\051\uffb7\054\uffb7\055\uffb7\056\uffb7\057\uffb7\060\uffb7" +
    "\001\002\000\056\004\uffc5\005\uffc5\006\112\007\147\011" +
    "\uffc5\013\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5" +
    "\023\uffc5\024\uffc5\026\uffc5\027\uffc5\030\uffc5\031\uffc5\032" +
    "\uffc5\033\uffc5\037\uffc5\041\uffc5\042\uffc5\001\002\000\034" +
    "\012\071\014\034\017\033\025\066\046\013\047\014\050" +
    "\020\051\030\054\037\055\077\056\041\057\035\060\036" +
    "\001\002\000\020\004\uffd0\005\uffd0\011\uffd0\013\uffd0\037" +
    "\uffd0\041\uffd0\042\uffd0\001\002\000\052\004\uffc4\005\uffc4" +
    "\011\uffc4\013\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4\022" +
    "\uffc4\023\uffc4\024\uffc4\026\uffc4\027\uffc4\030\uffc4\031\uffc4" +
    "\032\uffc4\033\uffc4\037\uffc4\041\uffc4\042\uffc4\001\002\000" +
    "\036\012\071\014\034\016\064\017\076\025\066\046\013" +
    "\047\014\050\020\051\030\054\037\055\077\056\041\057" +
    "\035\060\036\001\002\000\052\004\uffca\005\uffca\011\uffca" +
    "\013\uffca\016\uffca\017\uffca\020\142\021\141\022\137\023" +
    "\uffca\024\uffca\026\uffca\027\uffca\030\uffca\031\uffca\032\uffca" +
    "\033\uffca\037\uffca\041\uffca\042\uffca\001\002\000\052\004" +
    "\uffc3\005\uffc3\011\uffc3\013\uffc3\016\uffc3\017\uffc3\020\uffc3" +
    "\021\uffc3\022\uffc3\023\uffc3\024\uffc3\026\uffc3\027\uffc3\030" +
    "\uffc3\031\uffc3\032\uffc3\033\uffc3\037\uffc3\041\uffc3\042\uffc3" +
    "\001\002\000\020\004\uffcf\005\uffcf\011\uffcf\013\uffcf\037" +
    "\uffcf\041\uffcf\042\uffcf\001\002\000\034\012\071\014\034" +
    "\017\033\025\066\046\013\047\014\050\020\051\030\054" +
    "\037\055\077\056\041\057\035\060\036\001\002\000\034" +
    "\012\uffb6\014\uffb6\017\uffb6\025\uffb6\046\uffb6\047\uffb6\050" +
    "\uffb6\051\uffb6\054\055\055\uffb6\056\uffb6\057\uffb6\060\uffb6" +
    "\001\002\000\062\004\uffae\005\uffae\006\uffae\007\uffae\010" +
    "\121\011\uffae\012\127\013\uffae\016\uffae\017\uffae\020\uffae" +
    "\021\uffae\022\uffae\023\uffae\024\uffae\026\uffae\027\uffae\030" +
    "\uffae\031\uffae\032\uffae\033\uffae\037\uffae\041\uffae\042\uffae" +
    "\001\002\000\024\004\uffce\005\uffce\011\uffce\013\uffce\023" +
    "\106\024\107\037\uffce\041\uffce\042\uffce\001\002\000\052" +
    "\004\uffc2\005\uffc2\011\uffc2\013\uffc2\016\uffc2\017\uffc2\020" +
    "\uffc2\021\uffc2\022\uffc2\023\uffc2\024\uffc2\026\uffc2\027\uffc2" +
    "\030\uffc2\031\uffc2\032\uffc2\033\uffc2\037\uffc2\041\uffc2\042" +
    "\uffc2\001\002\000\056\004\uffb2\005\uffb2\006\uffb2\007\uffb2" +
    "\011\uffb2\013\uffb2\016\uffb2\017\uffb2\020\uffb2\021\uffb2\022" +
    "\uffb2\023\uffb2\024\uffb2\026\uffb2\027\uffb2\030\uffb2\031\uffb2" +
    "\032\uffb2\033\uffb2\037\uffb2\041\uffb2\042\uffb2\001\002\000" +
    "\052\004\uffc7\005\uffc7\011\uffc7\013\uffc7\016\uffc7\017\uffc7" +
    "\020\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7\026\uffc7\027" +
    "\uffc7\030\uffc7\031\uffc7\032\uffc7\033\uffc7\037\uffc7\041\uffc7" +
    "\042\uffc7\001\002\000\006\004\uffea\005\uffea\001\002\000" +
    "\036\012\071\014\034\016\064\017\076\025\066\046\013" +
    "\047\014\050\020\051\030\054\037\055\077\056\041\057" +
    "\035\060\036\001\002\000\036\012\uffbf\014\uffbf\016\uffbf" +
    "\017\uffbf\025\uffbf\046\uffbf\047\uffbf\050\uffbf\051\uffbf\054" +
    "\uffbf\055\uffbf\056\uffbf\057\uffbf\060\uffbf\001\002\000\036" +
    "\012\uffbe\014\uffbe\016\uffbe\017\uffbe\025\uffbe\046\uffbe\047" +
    "\uffbe\050\uffbe\051\uffbe\054\uffbe\055\uffbe\056\uffbe\057\uffbe" +
    "\060\uffbe\001\002\000\054\004\uffc5\005\uffc5\006\112\011" +
    "\uffc5\013\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5" +
    "\023\uffc5\024\uffc5\026\uffc5\027\uffc5\030\uffc5\031\uffc5\032" +
    "\uffc5\033\uffc5\037\uffc5\041\uffc5\042\uffc5\001\002\000\020" +
    "\004\uffcd\005\uffcd\011\uffcd\013\uffcd\037\uffcd\041\uffcd\042" +
    "\uffcd\001\002\000\006\012\115\055\114\001\002\000\056" +
    "\004\uffb1\005\uffb1\006\uffb1\007\uffb1\011\uffb1\013\uffb1\016" +
    "\uffb1\017\uffb1\020\uffb1\021\uffb1\022\uffb1\023\uffb1\024\uffb1" +
    "\026\uffb1\027\uffb1\030\uffb1\031\uffb1\032\uffb1\033\uffb1\037" +
    "\uffb1\041\uffb1\042\uffb1\001\002\000\060\004\uffae\005\uffae" +
    "\006\uffae\007\uffae\010\121\011\uffae\013\uffae\016\uffae\017" +
    "\uffae\020\uffae\021\uffae\022\uffae\023\uffae\024\uffae\026\uffae" +
    "\027\uffae\030\uffae\031\uffae\032\uffae\033\uffae\037\uffae\041" +
    "\uffae\042\uffae\001\002\000\006\012\115\055\114\001\002" +
    "\000\006\006\112\013\117\001\002\000\056\004\uffaf\005" +
    "\uffaf\006\uffaf\007\uffaf\011\uffaf\013\uffaf\016\uffaf\017\uffaf" +
    "\020\uffaf\021\uffaf\022\uffaf\023\uffaf\024\uffaf\026\uffaf\027" +
    "\uffaf\030\uffaf\031\uffaf\032\uffaf\033\uffaf\037\uffaf\041\uffaf" +
    "\042\uffaf\001\002\000\060\004\uffb0\005\uffb0\006\uffb0\007" +
    "\uffb0\010\124\011\uffb0\013\uffb0\016\uffb0\017\uffb0\020\uffb0" +
    "\021\uffb0\022\uffb0\023\uffb0\024\uffb0\026\uffb0\027\uffb0\030" +
    "\uffb0\031\uffb0\032\uffb0\033\uffb0\037\uffb0\041\uffb0\042\uffb0" +
    "\001\002\000\036\012\071\014\034\016\064\017\076\025" +
    "\066\046\013\047\014\050\020\051\030\054\037\055\077" +
    "\056\041\057\035\060\036\001\002\000\004\011\123\001" +
    "\002\000\060\004\uffad\005\uffad\006\uffad\007\uffad\010\uffad" +
    "\011\uffad\013\uffad\016\uffad\017\uffad\020\uffad\021\uffad\022" +
    "\uffad\023\uffad\024\uffad\026\uffad\027\uffad\030\uffad\031\uffad" +
    "\032\uffad\033\uffad\037\uffad\041\uffad\042\uffad\001\002\000" +
    "\036\012\071\014\034\016\064\017\076\025\066\046\013" +
    "\047\014\050\020\051\030\054\037\055\077\056\041\057" +
    "\035\060\036\001\002\000\004\011\126\001\002\000\060" +
    "\004\uffac\005\uffac\006\uffac\007\uffac\010\uffac\011\uffac\013" +
    "\uffac\016\uffac\017\uffac\020\uffac\021\uffac\022\uffac\023\uffac" +
    "\024\uffac\026\uffac\027\uffac\030\uffac\031\uffac\032\uffac\033" +
    "\uffac\037\uffac\041\uffac\042\uffac\001\002\000\040\012\071" +
    "\013\130\014\034\016\064\017\076\025\066\046\013\047" +
    "\014\050\020\051\030\054\037\055\077\056\041\057\035" +
    "\060\036\001\002\000\052\004\uff8a\005\uff8a\011\uff8a\013" +
    "\uff8a\016\uff8a\017\uff8a\020\uff8a\021\uff8a\022\uff8a\023\uff8a" +
    "\024\uff8a\026\uff8a\027\uff8a\030\uff8a\031\uff8a\032\uff8a\033" +
    "\uff8a\037\uff8a\041\uff8a\042\uff8a\001\002\000\006\005\133" +
    "\013\134\001\002\000\006\005\uff89\013\uff89\001\002\000" +
    "\036\012\071\014\034\016\064\017\076\025\066\046\013" +
    "\047\014\050\020\051\030\054\037\055\077\056\041\057" +
    "\035\060\036\001\002\000\052\004\uff8b\005\uff8b\011\uff8b" +
    "\013\uff8b\016\uff8b\017\uff8b\020\uff8b\021\uff8b\022\uff8b\023" +
    "\uff8b\024\uff8b\026\uff8b\027\uff8b\030\uff8b\031\uff8b\032\uff8b" +
    "\033\uff8b\037\uff8b\041\uff8b\042\uff8b\001\002\000\006\005" +
    "\uff88\013\uff88\001\002\000\052\004\uffc9\005\uffc9\011\uffc9" +
    "\013\uffc9\016\uffc9\017\uffc9\020\142\021\141\022\137\023" +
    "\uffc9\024\uffc9\026\uffc9\027\uffc9\030\uffc9\031\uffc9\032\uffc9" +
    "\033\uffc9\037\uffc9\041\uffc9\042\uffc9\001\002\000\034\012" +
    "\uffb3\014\uffb3\017\uffb3\025\uffb3\046\uffb3\047\uffb3\050\uffb3" +
    "\051\uffb3\054\uffb3\055\uffb3\056\uffb3\057\uffb3\060\uffb3\001" +
    "\002\000\034\012\071\014\034\017\033\025\066\046\013" +
    "\047\014\050\020\051\030\054\037\055\077\056\041\057" +
    "\035\060\036\001\002\000\034\012\uffb4\014\uffb4\017\uffb4" +
    "\025\uffb4\046\uffb4\047\uffb4\050\uffb4\051\uffb4\054\uffb4\055" +
    "\uffb4\056\uffb4\057\uffb4\060\uffb4\001\002\000\034\012\uffb5" +
    "\014\uffb5\017\uffb5\025\uffb5\046\uffb5\047\uffb5\050\uffb5\051" +
    "\uffb5\054\uffb5\055\uffb5\056\uffb5\057\uffb5\060\uffb5\001\002" +
    "\000\052\004\uffc6\005\uffc6\011\uffc6\013\uffc6\016\uffc6\017" +
    "\uffc6\020\uffc6\021\uffc6\022\uffc6\023\uffc6\024\uffc6\026\uffc6" +
    "\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\037\uffc6\041" +
    "\uffc6\042\uffc6\001\002\000\042\006\112\007\147\013\117" +
    "\016\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5\024" +
    "\uffc5\026\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5" +
    "\001\002\000\004\013\146\001\002\000\052\004\uffc1\005" +
    "\uffc1\011\uffc1\013\uffc1\016\uffc1\017\uffc1\020\uffc1\021\uffc1" +
    "\022\uffc1\023\uffc1\024\uffc1\026\uffc1\027\uffc1\030\uffc1\031" +
    "\uffc1\032\uffc1\033\uffc1\037\uffc1\041\uffc1\042\uffc1\001\002" +
    "\000\036\012\071\014\034\016\064\017\076\025\066\046" +
    "\013\047\014\050\020\051\030\054\037\055\077\056\041" +
    "\057\035\060\036\001\002\000\020\004\uffd1\005\uffd1\011" +
    "\uffd1\013\uffd1\037\uffd1\041\uffd1\042\uffd1\001\002\000\052" +
    "\004\uffc0\005\uffc0\011\uffc0\013\uffc0\016\uffc0\017\uffc0\020" +
    "\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0\026\uffc0\027\uffc0" +
    "\030\uffc0\031\uffc0\032\uffc0\033\uffc0\037\uffc0\041\uffc0\042" +
    "\uffc0\001\002\000\036\012\071\014\034\016\064\017\076" +
    "\025\066\046\013\047\014\050\020\051\030\054\037\055" +
    "\077\056\041\057\035\060\036\001\002\000\004\013\154" +
    "\001\002\000\112\002\uff87\004\uff87\005\uff87\011\uff87\012" +
    "\uff87\013\uff87\015\uff87\016\uff87\017\uff87\020\uff87\021\uff87" +
    "\022\uff87\023\uff87\024\uff87\026\uff87\027\uff87\030\uff87\031" +
    "\uff87\032\uff87\033\uff87\034\uff87\035\uff87\036\uff87\037\uff87" +
    "\040\uff87\041\uff87\042\uff87\044\uff87\045\uff87\046\uff87\047" +
    "\uff87\050\uff87\051\uff87\052\uff87\053\uff87\055\uff87\001\002" +
    "\000\034\012\uffb6\014\uffb6\017\uffb6\025\uffb6\046\uffb6\047" +
    "\uffb6\050\uffb6\051\uffb6\054\uffb6\055\uffb6\056\uffb6\057\uffb6" +
    "\060\uffb6\001\002\000\036\012\uffb9\014\uffb9\016\uffb9\017" +
    "\uffb9\025\uffb9\046\uffb9\047\uffb9\050\uffb9\051\uffb9\054\uffb9" +
    "\055\uffb9\056\uffb9\057\uffb9\060\uffb9\001\002\000\034\012" +
    "\071\014\034\017\033\025\066\046\013\047\014\050\020" +
    "\051\030\054\037\055\077\056\041\057\035\060\036\001" +
    "\002\000\036\012\uffbc\014\uffbc\016\uffbc\017\uffbc\025\uffbc" +
    "\046\uffbc\047\uffbc\050\uffbc\051\uffbc\054\uffbc\055\uffbc\056" +
    "\uffbc\057\uffbc\060\uffbc\001\002\000\036\012\uffbd\014\uffbd" +
    "\016\uffbd\017\uffbd\025\uffbd\046\uffbd\047\uffbd\050\uffbd\051" +
    "\uffbd\054\uffbd\055\uffbd\056\uffbd\057\uffbd\060\uffbd\001\002" +
    "\000\036\012\uffb8\014\uffb8\016\uffb8\017\uffb8\025\uffb8\046" +
    "\uffb8\047\uffb8\050\uffb8\051\uffb8\054\uffb8\055\uffb8\056\uffb8" +
    "\057\uffb8\060\uffb8\001\002\000\036\012\uffbb\014\uffbb\016" +
    "\uffbb\017\uffbb\025\uffbb\046\uffbb\047\uffbb\050\uffbb\051\uffbb" +
    "\054\uffbb\055\uffbb\056\uffbb\057\uffbb\060\uffbb\001\002\000" +
    "\036\012\071\014\034\016\064\017\076\025\066\046\013" +
    "\047\014\050\020\051\030\054\037\055\077\056\041\057" +
    "\035\060\036\001\002\000\036\012\uffba\014\uffba\016\uffba" +
    "\017\uffba\025\uffba\046\uffba\047\uffba\050\uffba\051\uffba\054" +
    "\uffba\055\uffba\056\uffba\057\uffba\060\uffba\001\002\000\030" +
    "\004\uffcb\005\uffcb\011\uffcb\013\uffcb\016\064\017\155\023" +
    "\uffcb\024\uffcb\037\uffcb\041\uffcb\042\uffcb\001\002\000\052" +
    "\004\uffc8\005\uffc8\011\uffc8\013\uffc8\016\uffc8\017\uffc8\020" +
    "\142\021\141\022\137\023\uffc8\024\uffc8\026\uffc8\027\uffc8" +
    "\030\uffc8\031\uffc8\032\uffc8\033\uffc8\037\uffc8\041\uffc8\042" +
    "\uffc8\001\002\000\004\055\060\001\002\000\046\002\ufff6" +
    "\004\ufff6\012\ufff6\015\ufff6\034\ufff6\035\ufff6\036\ufff6\037" +
    "\ufff6\040\ufff6\044\ufff6\045\ufff6\046\ufff6\047\ufff6\050\ufff6" +
    "\051\ufff6\052\ufff6\053\ufff6\055\ufff6\001\002\000\006\004" +
    "\uffec\005\uffec\001\002\000\016\013\uff92\043\176\046\013" +
    "\047\014\050\020\051\030\001\002\000\006\005\313\013" +
    "\uff93\001\002\000\006\005\uff91\013\uff91\001\002\000\012" +
    "\046\013\047\014\050\020\051\030\001\002\000\004\055" +
    "\310\001\002\000\004\013\201\001\002\000\036\004\210" +
    "\012\115\014\216\034\215\036\211\037\220\040\224\044" +
    "\012\046\013\047\014\050\020\051\030\053\213\055\077" +
    "\001\002\000\046\002\uffa4\004\uffa4\012\uffa4\015\uffa4\034" +
    "\uffa4\035\uffa4\036\uffa4\037\uffa4\040\uffa4\044\uffa4\045\uffa4" +
    "\046\uffa4\047\uffa4\050\uffa4\051\uffa4\052\uffa4\053\uffa4\055" +
    "\uffa4\001\002\000\046\002\uffa3\004\uffa3\012\uffa3\015\uffa3" +
    "\034\uffa3\035\uffa3\036\uffa3\037\uffa3\040\uffa3\044\uffa3\045" +
    "\uffa3\046\uffa3\047\uffa3\050\uffa3\051\uffa3\052\uffa3\053\uffa3" +
    "\055\uffa3\001\002\000\010\010\276\012\152\055\ufff5\001" +
    "\002\000\046\002\uffa2\004\uffa2\012\uffa2\015\uffa2\034\uffa2" +
    "\035\uffa2\036\uffa2\037\uffa2\040\uffa2\044\uffa2\045\uffa2\046" +
    "\uffa2\047\uffa2\050\uffa2\051\uffa2\052\uffa2\053\uffa2\055\uffa2" +
    "\001\002\000\004\055\060\001\002\000\046\002\uffa0\004" +
    "\uffa0\012\uffa0\015\uffa0\034\uffa0\035\uffa0\036\uffa0\037\uffa0" +
    "\040\uffa0\044\uffa0\045\uffa0\046\uffa0\047\uffa0\050\uffa0\051" +
    "\uffa0\052\uffa0\053\uffa0\055\uffa0\001\002\000\046\002\uff98" +
    "\004\uff98\012\uff98\015\uff98\034\uff98\035\uff98\036\uff98\037" +
    "\uff98\040\uff98\044\uff98\045\uff98\046\uff98\047\uff98\050\uff98" +
    "\051\uff98\052\uff98\053\uff98\055\uff98\001\002\000\004\012" +
    "\267\001\002\000\006\006\112\007\147\001\002\000\040" +
    "\004\264\012\071\014\034\016\064\017\076\025\066\046" +
    "\013\047\014\050\020\051\030\054\037\055\077\056\041" +
    "\057\035\060\036\001\002\000\004\004\263\001\002\000" +
    "\004\012\255\001\002\000\034\004\210\012\115\034\215" +
    "\036\211\037\220\040\224\044\012\046\013\047\014\050" +
    "\020\051\030\053\213\055\077\001\002\000\046\002\uffa9" +
    "\004\uffa9\012\uffa9\015\uffa9\034\uffa9\035\uffa9\036\uffa9\037" +
    "\uffa9\040\uffa9\044\uffa9\045\uffa9\046\uffa9\047\uffa9\050\uffa9" +
    "\051\uffa9\052\uffa9\053\uffa9\055\uffa9\001\002\000\036\004" +
    "\210\012\115\014\216\034\215\036\211\037\220\040\224" +
    "\044\012\046\013\047\014\050\020\051\030\053\213\055" +
    "\077\001\002\000\046\002\uffa6\004\uffa6\012\uffa6\015\uffa6" +
    "\034\uffa6\035\uffa6\036\uffa6\037\uffa6\040\uffa6\044\uffa6\045" +
    "\uffa6\046\uffa6\047\uffa6\050\uffa6\051\uffa6\052\uffa6\053\uffa6" +
    "\055\uffa6\001\002\000\046\002\uffa1\004\uffa1\012\uffa1\015" +
    "\uffa1\034\uffa1\035\uffa1\036\uffa1\037\uffa1\040\uffa1\044\uffa1" +
    "\045\uffa1\046\uffa1\047\uffa1\050\uffa1\051\uffa1\052\uffa1\053" +
    "\uffa1\055\uffa1\001\002\000\004\004\242\001\002\000\006" +
    "\012\115\055\114\001\002\000\046\002\uffa8\004\uffa8\012" +
    "\uffa8\015\uffa8\034\uffa8\035\uffa8\036\uffa8\037\uffa8\040\uffa8" +
    "\044\uffa8\045\uffa8\046\uffa8\047\uffa8\050\uffa8\051\uffa8\052" +
    "\uffa8\053\uffa8\055\uffa8\001\002\000\022\002\uff96\044\uff96" +
    "\045\uff96\046\uff96\047\uff96\050\uff96\051\uff96\052\uff96\001" +
    "\002\000\006\006\112\007\230\001\002\000\036\012\071" +
    "\014\034\016\064\017\076\025\066\046\013\047\014\050" +
    "\020\051\030\054\037\055\077\056\041\057\035\060\036" +
    "\001\002\000\006\041\232\042\233\001\002\000\036\012" +
    "\071\014\034\016\064\017\076\025\066\046\013\047\014" +
    "\050\020\051\030\054\037\055\077\056\041\057\035\060" +
    "\036\001\002\000\036\012\071\014\034\016\064\017\076" +
    "\025\066\046\013\047\014\050\020\051\030\054\037\055" +
    "\077\056\041\057\035\060\036\001\002\000\004\037\235" +
    "\001\002\000\036\004\210\012\115\014\216\034\215\036" +
    "\211\037\220\040\224\044\012\046\013\047\014\050\020" +
    "\051\030\053\213\055\077\001\002\000\046\002\uff99\004" +
    "\uff99\012\uff99\015\uff99\034\uff99\035\uff99\036\uff99\037\uff99" +
    "\040\uff99\044\uff99\045\uff99\046\uff99\047\uff99\050\uff99\051" +
    "\uff99\052\uff99\053\uff99\055\uff99\001\002\000\004\037\240" +
    "\001\002\000\036\004\210\012\115\014\216\034\215\036" +
    "\211\037\220\040\224\044\012\046\013\047\014\050\020" +
    "\051\030\053\213\055\077\001\002\000\046\002\uff9a\004" +
    "\uff9a\012\uff9a\015\uff9a\034\uff9a\035\uff9a\036\uff9a\037\uff9a" +
    "\040\uff9a\044\uff9a\045\uff9a\046\uff9a\047\uff9a\050\uff9a\051" +
    "\uff9a\052\uff9a\053\uff9a\055\uff9a\001\002\000\046\002\uffa5" +
    "\004\uffa5\012\uffa5\015\uffa5\034\uffa5\035\uffa5\036\uffa5\037" +
    "\uffa5\040\uffa5\044\uffa5\045\uffa5\046\uffa5\047\uffa5\050\uffa5" +
    "\051\uffa5\052\uffa5\053\uffa5\055\uffa5\001\002\000\004\036" +
    "\244\001\002\000\004\012\245\001\002\000\036\012\071" +
    "\014\034\016\064\017\076\025\066\046\013\047\014\050" +
    "\020\051\030\054\037\055\077\056\041\057\035\060\036" +
    "\001\002\000\004\013\247\001\002\000\004\004\250\001" +
    "\002\000\046\002\uff9b\004\uff9b\012\uff9b\015\uff9b\034\uff9b" +
    "\035\uff9b\036\uff9b\037\uff9b\040\uff9b\044\uff9b\045\uff9b\046" +
    "\uff9b\047\uff9b\050\uff9b\051\uff9b\052\uff9b\053\uff9b\055\uff9b" +
    "\001\002\000\036\004\uff9e\012\uff9e\015\uff9e\034\uff9e\036" +
    "\uff9e\037\uff9e\040\uff9e\044\uff9e\046\uff9e\047\uff9e\050\uff9e" +
    "\051\uff9e\053\uff9e\055\uff9e\001\002\000\036\004\210\012" +
    "\115\015\253\034\215\036\211\037\220\040\224\044\012" +
    "\046\013\047\014\050\020\051\030\053\213\055\077\001" +
    "\002\000\046\002\uff9f\004\uff9f\012\uff9f\015\uff9f\034\uff9f" +
    "\035\uff9f\036\uff9f\037\uff9f\040\uff9f\044\uff9f\045\uff9f\046" +
    "\uff9f\047\uff9f\050\uff9f\051\uff9f\052\uff9f\053\uff9f\055\uff9f" +
    "\001\002\000\036\004\uff9d\012\uff9d\015\uff9d\034\uff9d\036" +
    "\uff9d\037\uff9d\040\uff9d\044\uff9d\046\uff9d\047\uff9d\050\uff9d" +
    "\051\uff9d\053\uff9d\055\uff9d\001\002\000\036\012\071\014" +
    "\034\016\064\017\076\025\066\046\013\047\014\050\020" +
    "\051\030\054\037\055\077\056\041\057\035\060\036\001" +
    "\002\000\004\013\257\001\002\000\036\004\210\012\115" +
    "\014\216\034\215\036\211\037\220\040\224\044\012\046" +
    "\013\047\014\050\020\051\030\053\213\055\077\001\002" +
    "\000\046\002\uffab\004\uffab\012\uffab\015\uffab\034\uffab\035" +
    "\261\036\uffab\037\uffab\040\uffab\044\uffab\045\uffab\046\uffab" +
    "\047\uffab\050\uffab\051\uffab\052\uffab\053\uffab\055\uffab\001" +
    "\002\000\036\004\210\012\115\014\216\034\215\036\211" +
    "\037\220\040\224\044\012\046\013\047\014\050\020\051" +
    "\030\053\213\055\077\001\002\000\046\002\uffaa\004\uffaa" +
    "\012\uffaa\015\uffaa\034\uffaa\035\uffaa\036\uffaa\037\uffaa\040" +
    "\uffaa\044\uffaa\045\uffaa\046\uffaa\047\uffaa\050\uffaa\051\uffaa" +
    "\052\uffaa\053\uffaa\055\uffaa\001\002\000\046\002\uffa7\004" +
    "\uffa7\012\uffa7\015\uffa7\034\uffa7\035\uffa7\036\uffa7\037\uffa7" +
    "\040\uffa7\044\uffa7\045\uffa7\046\uffa7\047\uffa7\050\uffa7\051" +
    "\uffa7\052\uffa7\053\uffa7\055\uffa7\001\002\000\046\002\uff8d" +
    "\004\uff8d\012\uff8d\015\uff8d\034\uff8d\035\uff8d\036\uff8d\037" +
    "\uff8d\040\uff8d\044\uff8d\045\uff8d\046\uff8d\047\uff8d\050\uff8d" +
    "\051\uff8d\052\uff8d\053\uff8d\055\uff8d\001\002\000\004\004" +
    "\266\001\002\000\046\002\uff8c\004\uff8c\012\uff8c\015\uff8c" +
    "\034\uff8c\035\uff8c\036\uff8c\037\uff8c\040\uff8c\044\uff8c\045" +
    "\uff8c\046\uff8c\047\uff8c\050\uff8c\051\uff8c\052\uff8c\053\uff8c" +
    "\055\uff8c\001\002\000\036\012\071\014\034\016\064\017" +
    "\076\025\066\046\013\047\014\050\020\051\030\054\037" +
    "\055\077\056\041\057\035\060\036\001\002\000\004\013" +
    "\271\001\002\000\036\004\210\012\115\014\216\034\215" +
    "\036\211\037\220\040\224\044\012\046\013\047\014\050" +
    "\020\051\030\053\213\055\077\001\002\000\046\002\uff9c" +
    "\004\uff9c\012\uff9c\015\uff9c\034\uff9c\035\uff9c\036\uff9c\037" +
    "\uff9c\040\uff9c\044\uff9c\045\uff9c\046\uff9c\047\uff9c\050\uff9c" +
    "\051\uff9c\052\uff9c\053\uff9c\055\uff9c\001\002\000\006\004" +
    "\274\005\170\001\002\000\046\002\ufff7\004\ufff7\012\ufff7" +
    "\015\ufff7\034\ufff7\035\ufff7\036\ufff7\037\ufff7\040\ufff7\044" +
    "\ufff7\045\ufff7\046\ufff7\047\ufff7\050\ufff7\051\ufff7\052\ufff7" +
    "\053\ufff7\055\ufff7\001\002\000\010\010\303\052\ufff4\055" +
    "\ufff4\001\002\000\006\054\300\055\277\001\002\000\004" +
    "\011\302\001\002\000\004\011\301\001\002\000\010\010" +
    "\uffe9\052\uffe9\055\uffe9\001\002\000\010\010\uffe8\052\uffe8" +
    "\055\uffe8\001\002\000\006\054\305\055\304\001\002\000" +
    "\004\011\307\001\002\000\004\011\306\001\002\000\010" +
    "\010\uffe7\052\uffe7\055\uffe7\001\002\000\010\010\uffe6\052" +
    "\uffe6\055\uffe6\001\002\000\006\005\uff8f\013\uff8f\001\002" +
    "\000\004\055\312\001\002\000\006\005\uff8e\013\uff8e\001" +
    "\002\000\014\043\176\046\013\047\014\050\020\051\030" +
    "\001\002\000\006\005\uff90\013\uff90\001\002\000\022\002" +
    "\ufffa\044\ufffa\045\ufffa\046\ufffa\047\ufffa\050\ufffa\051\ufffa" +
    "\052\ufffa\001\002\000\006\010\303\055\uffee\001\002\000" +
    "\014\044\012\046\013\047\014\050\020\051\030\001\002" +
    "\000\016\015\334\044\012\046\013\047\014\050\020\051" +
    "\030\001\002\000\004\055\323\001\002\000\004\055\323" +
    "\001\002\000\006\004\uffe0\005\uffe0\001\002\000\006\004" +
    "\326\005\325\001\002\000\004\055\327\001\002\000\016" +
    "\015\uffe4\044\uffe4\046\uffe4\047\uffe4\050\uffe4\051\uffe4\001" +
    "\002\000\006\004\uffdf\005\uffdf\001\002\000\006\004\331" +
    "\005\325\001\002\000\016\015\uffe3\044\uffe3\046\uffe3\047" +
    "\uffe3\050\uffe3\051\uffe3\001\002\000\004\055\323\001\002" +
    "\000\004\055\323\001\002\000\006\010\uffe5\055\uffe5\001" +
    "\002\000\006\004\336\005\325\001\002\000\016\015\uffe2" +
    "\044\uffe2\046\uffe2\047\uffe2\050\uffe2\051\uffe2\001\002\000" +
    "\006\004\340\005\325\001\002\000\016\015\uffe1\044\uffe1" +
    "\046\uffe1\047\uffe1\050\uffe1\051\uffe1\001\002\000\012\004" +
    "\uffeb\005\uffeb\007\061\012\347\001\002\000\004\012\343" +
    "\001\002\000\016\013\uff92\043\176\046\013\047\014\050" +
    "\020\051\030\001\002\000\004\013\345\001\002\000\036" +
    "\004\210\012\115\014\216\034\215\036\211\037\220\040" +
    "\224\044\012\046\013\047\014\050\020\051\030\053\213" +
    "\055\077\001\002\000\022\002\uff95\044\uff95\045\uff95\046" +
    "\uff95\047\uff95\050\uff95\051\uff95\052\uff95\001\002\000\016" +
    "\013\uff92\043\176\046\013\047\014\050\020\051\030\001" +
    "\002\000\004\013\351\001\002\000\036\004\210\012\115" +
    "\014\216\034\215\036\211\037\220\040\224\044\012\046" +
    "\013\047\014\050\020\051\030\053\213\055\077\001\002" +
    "\000\022\002\uff97\044\uff97\045\uff97\046\uff97\047\uff97\050" +
    "\uff97\051\uff97\052\uff97\001\002\000\022\002\ufffd\044\ufffd" +
    "\045\ufffd\046\ufffd\047\ufffd\050\ufffd\051\ufffd\052\ufffd\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\351\000\006\037\004\062\003\001\001\000\030\002" +
    "\010\003\007\004\025\007\014\012\023\013\016\035\026" +
    "\036\021\040\020\057\006\061\015\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\002\010\003\007\004\025" +
    "\007\014\012\023\013\016\035\026\036\021\040\020\061" +
    "\352\001\001\000\004\043\274\001\001\000\006\005\055" +
    "\041\272\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\043\315\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\055\041\056" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\010\037" +
    "\011\042\001\001\000\002\001\001\000\010\010\045\011" +
    "\042\042\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\010\052\011\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\003\062\006\103\010\067\011\042\014\073\015\077\016" +
    "\061\017\071\020\102\022\066\023\064\024\100\025\101" +
    "\033\072\055\074\001\001\000\006\054\163\055\156\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\003\062\010\067\011\042\020\150\023\107\024" +
    "\100\025\101\033\072\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\003\062\006\144\010\067\011\042\014" +
    "\073\015\077\016\061\017\071\020\102\022\066\023\143" +
    "\024\100\025\101\033\072\055\074\001\001\000\004\056" +
    "\137\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\003\062\010\067\011\042\017\135\020\102\023\107\024" +
    "\100\025\101\033\072\001\001\000\002\001\001\000\004" +
    "\051\117\001\001\000\004\053\104\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\003\062\010\067\011\042\015\110\016\061\017" +
    "\071\020\102\023\107\024\100\025\101\033\072\055\074" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\025\112\001\001\000\002" +
    "\001\001\000\004\051\117\001\001\000\006\023\115\025" +
    "\101\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\003\062\006\121\010\067\011\042\014" +
    "\073\015\077\016\061\017\071\020\102\022\066\023\064" +
    "\024\100\025\101\033\072\055\074\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\003\062\006\124\010\067" +
    "\011\042\014\073\015\077\016\061\017\071\020\102\022" +
    "\066\023\064\024\100\025\101\033\072\055\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\003\062\006" +
    "\131\010\067\011\042\014\073\015\077\016\061\017\071" +
    "\020\102\022\066\023\064\024\100\025\101\033\072\047" +
    "\130\055\074\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\003\062\006\134\010\067\011" +
    "\042\014\073\015\077\016\061\017\071\020\102\022\066" +
    "\023\064\024\100\025\101\033\072\055\074\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\056\137\001\001" +
    "\000\002\001\001\000\022\003\062\010\067\011\042\020" +
    "\142\023\107\024\100\025\101\033\072\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\003\062" +
    "\006\147\010\067\011\042\014\073\015\077\016\061\017" +
    "\071\020\102\022\066\023\064\024\100\025\101\033\072" +
    "\055\074\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\003\062\006\152\010\067\011\042\014\073\015\077" +
    "\016\061\017\071\020\102\022\066\023\064\024\100\025" +
    "\101\033\072\055\074\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\003" +
    "\062\010\067\011\042\017\166\020\102\023\107\024\100" +
    "\025\101\033\072\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\003\062" +
    "\010\067\011\042\016\165\017\071\020\102\023\107\024" +
    "\100\025\101\033\072\055\074\001\001\000\002\001\001" +
    "\000\004\055\156\001\001\000\004\056\137\001\001\000" +
    "\004\005\171\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\002\176\003\007\034\174\045\173\046\177\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\002\310" +
    "\003\007\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\002\205\003\203\004\221\012\023\013\016\021\204" +
    "\022\213\023\211\024\222\025\101\026\225\027\201\030" +
    "\216\031\224\032\202\033\220\060\206\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\043\274\001\001\000" +
    "\002\001\001\000\006\005\055\041\272\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\003\062\006\264\010\067\011\042\014\073" +
    "\015\077\016\061\017\071\020\102\022\066\023\064\024" +
    "\100\025\101\033\072\055\074\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\002\205\003\203\004\221\012" +
    "\023\013\016\021\204\022\213\023\211\024\222\025\101" +
    "\027\201\030\250\032\202\033\220\050\251\060\206\001" +
    "\001\000\002\001\001\000\044\002\205\003\203\004\221" +
    "\012\023\013\016\021\204\022\213\023\211\024\222\025" +
    "\101\026\242\027\201\030\216\031\224\032\202\033\220" +
    "\060\206\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\023\226\025\101\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\003" +
    "\062\006\230\010\067\011\042\014\073\015\077\016\061" +
    "\017\071\020\102\022\066\023\064\024\100\025\101\033" +
    "\072\055\074\001\001\000\002\001\001\000\040\003\062" +
    "\006\236\010\067\011\042\014\073\015\077\016\061\017" +
    "\071\020\102\022\066\023\064\024\100\025\101\033\072" +
    "\055\074\001\001\000\040\003\062\006\233\010\067\011" +
    "\042\014\073\015\077\016\061\017\071\020\102\022\066" +
    "\023\064\024\100\025\101\033\072\055\074\001\001\000" +
    "\002\001\001\000\044\002\205\003\203\004\221\012\023" +
    "\013\016\021\204\022\213\023\211\024\222\025\101\026" +
    "\235\027\201\030\216\031\224\032\202\033\220\060\206" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\002" +
    "\205\003\203\004\221\012\023\013\016\021\204\022\213" +
    "\023\211\024\222\025\101\026\240\027\201\030\216\031" +
    "\224\032\202\033\220\060\206\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\003\062\006\245\010\067\011\042\014\073\015\077" +
    "\016\061\017\071\020\102\022\066\023\064\024\100\025" +
    "\101\033\072\055\074\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\002" +
    "\205\003\203\004\221\012\023\013\016\021\204\022\213" +
    "\023\211\024\222\025\101\027\201\030\253\032\202\033" +
    "\220\060\206\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\003\062\006\255\010\067\011\042\014\073\015" +
    "\077\016\061\017\071\020\102\022\066\023\064\024\100" +
    "\025\101\033\072\055\074\001\001\000\002\001\001\000" +
    "\044\002\205\003\203\004\221\012\023\013\016\021\204" +
    "\022\213\023\211\024\222\025\101\026\257\027\201\030" +
    "\216\031\224\032\202\033\220\060\206\001\001\000\002" +
    "\001\001\000\044\002\205\003\203\004\221\012\023\013" +
    "\016\021\204\022\213\023\211\024\222\025\101\026\261" +
    "\027\201\030\216\031\224\032\202\033\220\060\206\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\003\062\006" +
    "\267\010\067\011\042\014\073\015\077\016\061\017\071" +
    "\020\102\022\066\023\064\024\100\025\101\033\072\055" +
    "\074\001\001\000\002\001\001\000\044\002\205\003\203" +
    "\004\221\012\023\013\016\021\204\022\213\023\211\024" +
    "\222\025\101\026\271\027\201\030\216\031\224\032\202" +
    "\033\220\060\206\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\002\176" +
    "\003\007\034\313\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\002\321\003\007\012\320" +
    "\013\016\044\317\001\001\000\012\002\332\003\007\012" +
    "\331\013\016\001\001\000\004\052\327\001\001\000\004" +
    "\052\323\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\052\336\001\001\000" +
    "\004\052\334\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\002\176\003\007" +
    "\034\174\045\173\046\343\001\001\000\002\001\001\000" +
    "\044\002\205\003\203\004\221\012\023\013\016\021\204" +
    "\022\213\023\211\024\222\025\101\026\345\027\201\030" +
    "\216\031\224\032\202\033\220\060\206\001\001\000\002" +
    "\001\001\000\014\002\176\003\007\034\174\045\173\046" +
    "\347\001\001\000\002\001\001\000\044\002\205\003\203" +
    "\004\221\012\023\013\016\021\204\022\213\023\211\024" +
    "\222\025\101\026\351\027\201\030\216\031\224\032\202" +
    "\033\220\060\206\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 2;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.next_token(); 
    }


	public boolean syntaxErrors;


	Scanner lexer;

	public Parser(Scanner lex) {
		super(lex);
		lexer = lex;
	}


	public void report_error(String message, Object info) {
		syntaxErrors = true;

		System.err.print(message);

		if ( !(info instanceof Symbol) ) return;
		Symbol symbol = (Symbol) info;

		if ( symbol.left < 0 || symbol.right < 0 ) return;

		System.err.println(" at line "+symbol.left+", column "+symbol.right);
		System.exit(1);
	}
	
	
	/* Tipos primitivos */
	
	public static void main(String args[]) throws Exception {
		Scanner scanner = null;
		try {
			scanner = new Scanner( new java.io.FileReader(args[0]) );
		}
		catch (java.io.FileNotFoundException e) {
			System.out.println("File not found : \""+args[0]+"\"");
			System.exit(1);
		}
		catch (java.io.IOException e) {
			System.out.println("Error opening file \""+args[0]+"\"");
			System.exit(1);
		}
		catch (ArrayIndexOutOfBoundsException e) {
			System.out.println("Usage : java Main <inputfile>");
			System.exit(1);
		}
	      
		try {
			Parser p = new Parser(scanner);
			Object result = p.parse().value;
		}
		catch (java.io.IOException e) {
			System.out.println("An I/O error occured while parsing : \n"+e);
			System.exit(1);
		}
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {

	static TreeNode intType;
	static TreeNode boolType;
	static TreeNode charType;
	static TreeNode voidType;
	static TreeNodeFactory nodeFactory;
	TreeNode program;

	public void init_types() {
 		nodeFactory = new AbsNodeFactory();

		/* Inicializacao dos tipos primitivos */
		intType = nodeFactory.makePrimType("int");
		boolType = nodeFactory.makePrimType("boolean");
		charType = nodeFactory.makePrimType("char");
		voidType = nodeFactory.makePrimType("void");
		program = nodeFactory.makeProgram();
	}
	
	/*
	 * Funcao que adiciona os nos de TreeNode armazenado em um arraylist 
	 * em uma variavel Treenode
	 */
	private TreeNode addChildNodes(TreeNode parent, ArrayList list) {
		ArrayList <TreeNode>aList = list;
		for (TreeNode node : aList) {
			try {
				parent.addChild(node);
			} catch (Exception e) {
				System.err.println("Error");
			}
		}
		return parent;
	}
	

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // casting ::= tipo_primitivo LPAREN expressao RPAREN 
            {
              TreeNode RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		TreeNode tp = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TreeNode e = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		String ident = "";
		if (tp == intType) ident = "int";
		else if (tp == charType) ident = "char";
		else if (tp == boolType) ident = "bool";
		else if (tp == voidType) ident = "void";

		TreeNode cfuncao = nodeFactory.makeCallOp(ident);
		cfuncao.addChild(e);
		RESULT = cfuncao;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("casting",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // lista_valores ::= lista_valores COMA expressao 
            {
              ArrayList RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList lv = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode e = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		lv.add(e);
		RESULT = lv;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_valores",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // lista_valores ::= expressao 
            {
              ArrayList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode e = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		ArrayList lv = new ArrayList<TreeNode>();
		lv.add(e);
		RESULT = lv;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_valores",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // chamada_funcao ::= IDENTIFICADOR LPAREN RPAREN 
            {
              TreeNode RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
		RESULT = nodeFactory.makeCallOp(ident);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("chamada_funcao",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // chamada_funcao ::= IDENTIFICADOR LPAREN lista_valores RPAREN 
            {
              TreeNode RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList lv = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		TreeNode cfuncao = nodeFactory.makeCallOp(ident);

		cfuncao = this.addChildNodes(cfuncao, lv);
		RESULT = cfuncao;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("chamada_funcao",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // retorno_funcao ::= RETURN expressao SEMI 
            {
              TreeNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TreeNode e = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		RESULT = nodeFactory.makeReturnStat(e);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno_funcao",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // retorno_funcao ::= RETURN SEMI 
            {
              TreeNode RESULT =null;
		
		RESULT = nodeFactory.makeReturnStat(null);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno_funcao",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // parametro ::= REF tipo IDENTIFICADOR 
            {
              TreeNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TreeNode t = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int identleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = nodeFactory.makeParmDecl(ident, t, true);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametro",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // parametro ::= tipo IDENTIFICADOR 
            {
              TreeNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TreeNode t = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int identleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = nodeFactory.makeParmDecl(ident, t, false);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametro",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // lparametro ::= lparametro COMA parametro 
            {
              ArrayList RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList lp = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode p = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		lp.add(p);
		RESULT = lp;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lparametro",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // lparametro ::= parametro 
            {
              ArrayList RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode p = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		ArrayList lp = new ArrayList<TreeNode>();
		lp.add(p);
		RESULT = lp;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lparametro",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // lista_parametros ::= 
            {
              ArrayList RESULT =null;
		
		RESULT = null;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // lista_parametros ::= lparametro 
            {
              ArrayList RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList lp = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = lp;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // prototipo_funcao ::= tipo IDENTIFICADOR LPAREN lista_parametros RPAREN 
            {
              TreeNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		TreeNode t = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int identleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList lp = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		TreeNode dfuncao = nodeFactory.makeFunctionDecl(ident,t, null);
		if (lp != null)
			dfuncao = this.addChildNodes(dfuncao, lp);
		RESULT = dfuncao;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prototipo_funcao",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // declaracao_funcao_main ::= tipo MAIN LPAREN lista_parametros RPAREN comando 
            {
              TreeNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		TreeNode t = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList lp = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode c = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		TreeNode dfuncao = nodeFactory.makeFunctionDecl("main", t, c);
		if (lp != null)
			dfuncao = this.addChildNodes(dfuncao, lp);
		RESULT = dfuncao;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracao_funcao_main",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // declaracao_funcao_main ::= MAIN LPAREN lista_parametros RPAREN comando 
            {
              TreeNode RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList lp = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode c = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		TreeNode dfuncao = nodeFactory.makeFunctionDecl("main", null, c);
		if (lp != null)
			dfuncao = this.addChildNodes(dfuncao, lp);
		RESULT = dfuncao;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracao_funcao_main",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // declaracao_funcao ::= tipo IDENTIFICADOR LPAREN lista_parametros RPAREN comando 
            {
              TreeNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		TreeNode t = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int identleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList lp = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode c = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		TreeNode dfuncao = nodeFactory.makeFunctionDecl(ident,t, c);
		if (lp != null)
			dfuncao = this.addChildNodes(dfuncao, lp);
		RESULT = dfuncao;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracao_funcao",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // vazio ::= SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vazio",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // comando_repetitivo ::= FOR variavel ATRIBUTION expressao DOWNTO expressao DO comando 
            {
              TreeNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		TreeNode v = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		TreeNode e1 = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TreeNode e2 = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode c = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		TreeNode f = nodeFactory.makeForStat(v, e1, e2, false);
		f.addChild(c);
		RESULT = f;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_repetitivo",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // comando_repetitivo ::= FOR variavel ATRIBUTION expressao TO expressao DO comando 
            {
              TreeNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		TreeNode v = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		TreeNode e1 = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TreeNode e2 = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode c = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		TreeNode f = nodeFactory.makeForStat(v, e1, e2, true);
		f.addChild(c);
		RESULT = f;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_repetitivo",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // comando_repetitivo ::= DO comando WHILE LPAREN expressao RPAREN SEMI 
            {
              TreeNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		TreeNode c = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TreeNode e = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
		RESULT = nodeFactory.makeDoStat(e, c);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_repetitivo",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // comando_repetitivo ::= WHILE LPAREN expressao RPAREN comando 
            {
              TreeNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TreeNode e = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode c = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = nodeFactory.makeWhileStat(e, c);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_repetitivo",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // sequencia_comandos ::= sequencia_comandos comando_simples 
            {
              ArrayList RESULT =null;
		int lcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList lc = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode cs = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		lc.add(cs);
		RESULT = lc;		
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sequencia_comandos",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // sequencia_comandos ::= comando_simples 
            {
              ArrayList RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode cs = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		ArrayList lc = new ArrayList<TreeNode>();
		lc.add(cs);
		RESULT = lc;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sequencia_comandos",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // comando_composto ::= LBRACE sequencia_comandos RBRACE 
            {
              TreeNode RESULT =null;
		int scleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList sc = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		TreeNode corpo = nodeFactory.makeCompoundStat();
		corpo = this.addChildNodes(corpo, sc);
		RESULT = corpo; 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_composto",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // comando_simples ::= vazio 
            {
              TreeNode RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_simples",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // comando_simples ::= variaveis 
            {
              TreeNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode v = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_simples",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // comando_simples ::= retorno_funcao 
            {
              TreeNode RESULT =null;
		int rfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode rf = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = rf; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_simples",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // comando_simples ::= comando_repetitivo 
            {
              TreeNode RESULT =null;
		int crleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int crright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode cr = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = cr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_simples",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // comando_simples ::= comando_condicional 
            {
              TreeNode RESULT =null;
		int ccleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode cc = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = cc; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_simples",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // comando_simples ::= chamada_funcao SEMI 
            {
              TreeNode RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TreeNode cf = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = cf; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_simples",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // comando_simples ::= casting 
            {
              TreeNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode c = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_simples",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // comando_simples ::= atribuicao SEMI 
            {
              TreeNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TreeNode a = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_simples",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // comando ::= comando_composto 
            {
              TreeNode RESULT =null;
		int ccleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode cc = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = cc; 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // comando ::= comando_simples 
            {
              TreeNode RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode cs = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		TreeNode corpo = nodeFactory.makeCompoundStat();
		if (cs != null) {
			corpo.addChild(cs);
			RESULT = corpo; 
		} else {
			RESULT = null;
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // comando_condicional ::= IF LPAREN expressao RPAREN comando ELSE comando 
            {
              TreeNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		TreeNode e = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TreeNode c1 = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode c2 = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = nodeFactory.makeIfStat(e, c1, c2);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_condicional",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // comando_condicional ::= IF LPAREN expressao RPAREN comando 
            {
              TreeNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TreeNode e = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode c = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = nodeFactory.makeIfStat(e, c, null);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_condicional",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // vexpressao ::= vexpressao LBRACKET expressao RBRACKET 
            {
              ArrayList RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ArrayList le = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TreeNode e = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		le.add(e);
		RESULT = le;		
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vexpressao",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // vexpressao ::= LBRACKET expressao RBRACKET 
            {
              ArrayList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TreeNode e = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		ArrayList le = new ArrayList<TreeNode>();
		le.add(e);
		RESULT = le;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vexpressao",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // var ::= IDENTIFICADOR 
            {
              TreeNode RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = nodeFactory.makeVarOp(ident); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // var ::= LPAREN variavel RPAREN 
            {
              TreeNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TreeNode v = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // var ::= IDENTIFICADOR vexpressao 
            {
              TreeNode RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int veleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int veright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList ve = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		ArrayList <TreeNode> aList = ve;
		TreeNode p = nodeFactory.makeVarOp(ident);
		for (TreeNode indice : aList) {
			p = nodeFactory.makeOperation(PL747Consts.INDEX_OP, p, indice);
		}
		RESULT = p;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // variavel ::= variavel DOT var 
            {
              TreeNode RESULT =null;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TreeNode v2 = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode v1 = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = nodeFactory.makeOperation(PL747Consts.SEL_OP, v2, v1);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variavel",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // variavel ::= var 
            {
              TreeNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode v = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = v;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variavel",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // operador_multiplicativo ::= MOD 
            {
              Integer RESULT =null;
		 RESULT = PL747Consts.MOD_OP; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_multiplicativo",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // operador_multiplicativo ::= DIVIDE 
            {
              Integer RESULT =null;
		 RESULT = PL747Consts.DIV_OP; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_multiplicativo",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // operador_multiplicativo ::= TIMES 
            {
              Integer RESULT =null;
		 RESULT = PL747Consts.MULT_OP; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_multiplicativo",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // operador_aditivo ::= MINUS 
            {
              Integer RESULT =null;
		 RESULT = PL747Consts.SUB_OP; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_aditivo",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // operador_aditivo ::= PLUS 
            {
              Integer RESULT =null;
		 RESULT = PL747Consts.ADD_OP; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_aditivo",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // operador_relacional ::= MORE 
            {
              Integer RESULT =null;
		 RESULT = PL747Consts.GT_OP; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // operador_relacional ::= MEQUAL 
            {
              Integer RESULT =null;
		 RESULT = PL747Consts.GE_OP; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // operador_relacional ::= LEQUAL 
            {
              Integer RESULT =null;
		 RESULT = PL747Consts.LE_OP; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // operador_relacional ::= LESS 
            {
              Integer RESULT =null;
		 RESULT = PL747Consts.LT_OP; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // operador_relacional ::= NEQUAL 
            {
              Integer RESULT =null;
		 RESULT = PL747Consts.NE_OP; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // operador_relacional ::= EQUAL 
            {
              Integer RESULT =null;
		 RESULT = PL747Consts.EQ_OP; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // operador_logico ::= OR 
            {
              Integer RESULT =null;
		 RESULT = PL747Consts.OR_OP; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_logico",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // operador_logico ::= AND 
            {
              Integer RESULT =null;
		 RESULT = PL747Consts.AND_OP; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_logico",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // fator ::= NOT fator 
            {
              TreeNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode f = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			
		RESULT = nodeFactory.makeOperation(PL747Consts.NOT_OP, f, null);	
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fator",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // fator ::= LPAREN expressao RPAREN 
            {
              TreeNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TreeNode e = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fator",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // fator ::= chamada_funcao 
            {
              TreeNode RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode cf = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = cf; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fator",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // fator ::= casting 
            {
              TreeNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode c = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fator",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // fator ::= valor 
            {
              TreeNode RESULT =null;
		int vlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode vl = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = vl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fator",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // fator ::= variavel 
            {
              TreeNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode v = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fator",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // termo ::= termo operador_multiplicativo fator 
            {
              TreeNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TreeNode t = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int omleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int omright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer om = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode f = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = nodeFactory.makeOperation(om, t, f);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("termo",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // termo ::= fator 
            {
              TreeNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode f = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = f;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("termo",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expressao_aritmetica ::= expressao_aritmetica operador_aditivo termo 
            {
              TreeNode RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TreeNode ea = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer oa = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode t = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = nodeFactory.makeOperation(oa, ea, t);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_aritmetica",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expressao_aritmetica ::= operador_aditivo termo 
            {
              TreeNode RESULT =null;
		int oaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer oa = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode t = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if (oa == PL747Consts.SUB_OP)
			RESULT = nodeFactory.makeOperation(PL747Consts.MINUS_OP, t, null);
		else 
			RESULT = t;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_aritmetica",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expressao_aritmetica ::= termo 
            {
              TreeNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode t = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = t;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_aritmetica",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expressao_relacional ::= expressao_aritmetica operador_relacional expressao_aritmetica 
            {
              TreeNode RESULT =null;
		int ea1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ea1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TreeNode ea1 = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int orleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int orright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer or = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ea2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ea2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode ea2 = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = nodeFactory.makeOperation(or, ea1, ea2);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_relacional",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expressao_relacional ::= expressao_aritmetica 
            {
              TreeNode RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode ea = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = ea;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_relacional",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expressao_logica ::= expressao_relacional operador_logico expressao_relacional 
            {
              TreeNode RESULT =null;
		int el1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int el1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TreeNode el1 = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int olleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int olright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer ol = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int el2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int el2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode el2 = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = nodeFactory.makeOperation(ol, el1, el2);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_logica",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expressao_logica ::= expressao_relacional 
            {
              TreeNode RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode el = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = el;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_logica",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expressao ::= expressao_logica 
            {
              TreeNode RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode el = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = el;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expressao ::= atribuicao 
            {
              TreeNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode a = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = a;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // atribuicao ::= variavel ATRIBUTION expressao 
            {
              TreeNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TreeNode v = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode e = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = nodeFactory.makeOperation(PL747Consts.ASSIGN_OP, v, e);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atribuicao",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // lvalor ::= lvalor COMA valor 
            {
              ArrayList RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList lv = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode v = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		lv.add(v);
		RESULT = lv;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lvalor",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // lvalor ::= lvalor COMA IDENTIFICADOR 
            {
              ArrayList RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList lv = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int identleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		lv.add(nodeFactory.makeVarOp(ident));
		RESULT = lv;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lvalor",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // lvalor ::= IDENTIFICADOR 
            {
              ArrayList RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		ArrayList lv = new ArrayList<TreeNode>();
		lv.add(nodeFactory.makeVarOp(ident));
		RESULT = lv;		
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lvalor",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // lvalor ::= valor 
            {
              ArrayList RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode v = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		ArrayList lv = new ArrayList<TreeNode>();
		lv.add(v);
		RESULT = lv;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lvalor",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // tupla ::= LBRACE lvalor RBRACE 
            {
              TreeNode RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList lv = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		TreeNode tup = nodeFactory.makeTuple();
		RESULT = this.addChildNodes(tup, lv);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tupla",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // valor ::= BOOLEAN_VALOR 
            {
              TreeNode RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=nodeFactory.makeBoolConstOp(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // valor ::= CHARACTER 
            {
              TreeNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=nodeFactory.makeCharConstOp(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // valor ::= STRING 
            {
              TreeNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=nodeFactory.makeString(s.substring(1,(s.length()-1))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // valor ::= tupla 
            {
              TreeNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode t = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // valor ::= MINUS NUMBER 
            {
              TreeNode RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=nodeFactory.makeIntConstOp("-"+n); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // valor ::= NUMBER 
            {
              TreeNode RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=nodeFactory.makeIntConstOp(n); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // constante ::= CONST IDENTIFICADOR ATRIBUTION IDENTIFICADOR SEMI 
            {
              TreeNode RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		RESULT = nodeFactory.makeConstDef(ident,nodeFactory.makeVarOp(i)); 

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constante",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // constante ::= CONST IDENTIFICADOR ATRIBUTION valor SEMI 
            {
              TreeNode RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TreeNode v = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		RESULT = nodeFactory.makeConstDef(ident,v);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constante",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // lista_variaveis_estrutura ::= lista_variaveis_estrutura COMA IDENTIFICADOR 
            {
              ArrayList RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList lv = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int identleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
   		lv.add(nodeFactory.makeVarDecl(ident,null));
		RESULT=lv;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_variaveis_estrutura",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // lista_variaveis_estrutura ::= IDENTIFICADOR 
            {
              ArrayList RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		ArrayList lv = new ArrayList<TreeNode>();
	   	lv.add(nodeFactory.makeVarDecl(ident,null));
	   	RESULT=lv; 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_variaveis_estrutura",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // sequencia_campos ::= sequencia_campos tipo_estrutura lista_variaveis_estrutura SEMI 
            {
              ArrayList RESULT =null;
		int tnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ArrayList tn = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TreeNode t = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList l = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		TreeNode declaration = nodeFactory.makeVarDeclList(t);
		declaration = this.addChildNodes(declaration, l);
		
		tn.add(declaration);
		RESULT = tn;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sequencia_campos",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // sequencia_campos ::= sequencia_campos tipo lista_variaveis_estrutura SEMI 
            {
              ArrayList RESULT =null;
		int tnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ArrayList tn = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TreeNode t = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList l = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		TreeNode declaration = nodeFactory.makeVarDeclList(t);
		declaration = this.addChildNodes(declaration, l);

		tn.add(declaration);
		RESULT = tn;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sequencia_campos",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // sequencia_campos ::= tipo_estrutura lista_variaveis_estrutura SEMI 
            {
              ArrayList RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TreeNode t = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList l = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		TreeNode declaration = nodeFactory.makeVarDeclList(t);
		declaration = this.addChildNodes(declaration, l);

		ArrayList tn = new ArrayList<TreeNode>();
		tn.add(declaration);
		RESULT = tn;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sequencia_campos",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // sequencia_campos ::= tipo lista_variaveis_estrutura SEMI 
            {
              ArrayList RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TreeNode t = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList l = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
		TreeNode declaration = nodeFactory.makeVarDeclList(t);
		declaration = this.addChildNodes(declaration, l);

		ArrayList tn = new ArrayList<TreeNode>();
		tn.add(declaration);
		RESULT = tn;						
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sequencia_campos",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // estrutura ::= STRUCT LBRACE sequencia_campos RBRACE 
            {
              TreeNode RESULT =null;
		int scleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList sc = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		TreeNode estr = nodeFactory.makeStructType();
		RESULT = this.addChildNodes(estr, sc);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estrutura",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // lista_indices ::= lista_indices LBRACKET IDENTIFICADOR RBRACKET 
            {
              ArrayList RESULT =null;
		int lstrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lstrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ArrayList lstr = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int identleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		lstr.add(ident);
		RESULT = lstr;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_indices",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // lista_indices ::= lista_indices LBRACKET NUMBER RBRACKET 
            {
              ArrayList RESULT =null;
		int lstrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lstrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ArrayList lstr = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		lstr.add(n);
		RESULT = lstr;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_indices",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // lista_indices ::= LBRACKET IDENTIFICADOR RBRACKET 
            {
              ArrayList RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		ArrayList str = new ArrayList<String>();
		str.add(ident);
		RESULT = str;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_indices",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // lista_indices ::= LBRACKET NUMBER RBRACKET 
            {
              ArrayList RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
		ArrayList str = new ArrayList<String>();
		str.add(n);
		RESULT = str;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_indices",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // declaracao_variavel ::= IDENTIFICADOR ATRIBUTION expressao 
            {
              TreeNode RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode expr = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
	  	RESULT= nodeFactory.makeVarDecl(ident,expr);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracao_variavel",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declaracao_variavel ::= IDENTIFICADOR 
            {
              TreeNode RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		RESULT= nodeFactory.makeVarDecl(ident,null);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracao_variavel",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // lista_variaveis ::= lista_variaveis COMA declaracao_variavel 
            {
              ArrayList RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList lv = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode d = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		lv.add(d);
		RESULT=lv;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_variaveis",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // lista_variaveis ::= declaracao_variavel 
            {
              ArrayList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode d = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		ArrayList lv = new ArrayList<TreeNode>();
	   	lv.add(d);
	   	RESULT=lv; 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_variaveis",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // tipo_estrutura ::= estrutura lista_indices 
            {
              TreeNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TreeNode e = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList li = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
    	TreeNode p = e;
		ArrayList <String>list = li;
		for(int i = li.size()-1; i >= 0; i--) {
			if (li.get(i) instanceof String) {
				String s;
				s = (String)li.get(i);
				p = nodeFactory.makeVectorType(s,p);
			} 
		}

		RESULT = p;	         
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_estrutura",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // tipo_estrutura ::= estrutura 
            {
              TreeNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode e = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT=e;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_estrutura",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // tipo_primitivo ::= BOOLEAN 
            {
              TreeNode RESULT =null;
		 RESULT=boolType; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_primitivo",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tipo_primitivo ::= VOID 
            {
              TreeNode RESULT =null;
		 RESULT=voidType; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_primitivo",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tipo_primitivo ::= CHAR 
            {
              TreeNode RESULT =null;
		 RESULT=charType; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_primitivo",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tipo_primitivo ::= INT 
            {
              TreeNode RESULT =null;
		 RESULT = intType; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_primitivo",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // tipo ::= tipo_primitivo lista_indices 
            {
              TreeNode RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TreeNode tp = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList li = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		TreeNode p = tp;
		ArrayList <String>list = li;
		for(int i = li.size()-1; i >= 0; i--) {
			if (li.get(i) instanceof String) {
				String s;
				s = (String)li.get(i);
				p = nodeFactory.makeVectorType(s,p);
			} 
		}
		RESULT = p;
   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // tipo ::= tipo_primitivo 
            {
              TreeNode RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode tp = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		RESULT=tp; 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // variaveis ::= tipo_estrutura lista_variaveis SEMI 
            {
              TreeNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TreeNode t = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList l = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		TreeNode declaration = nodeFactory.makeVarDeclList(t);
		RESULT = this.addChildNodes(declaration, l);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variaveis",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // variaveis ::= tipo lista_variaveis SEMI 
            {
              TreeNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TreeNode t = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList l = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
		TreeNode declaration = nodeFactory.makeVarDeclList(t);
		RESULT = this.addChildNodes(declaration, l);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variaveis",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // programa ::= declaracao_funcao_main 
            {
              Object RESULT =null;
		int dfmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dfmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode dfm = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		program.addChild(dfm);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // programa ::= declaracao_funcao 
            {
              Object RESULT =null;
		int dfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode df = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		program.addChild(df);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // programa ::= prototipo_funcao SEMI 
            {
              Object RESULT =null;
		int pfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TreeNode pf = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		program.addChild(pf);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // programa ::= constante 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode c = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		program.addChild(c);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // programa ::= variaveis 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode v = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		program.addChild(v);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // lista_programa ::= lista_programa programa 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_programa",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lista_programa ::= programa 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_programa",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // $START ::= root_programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TreeNode start_val = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // root_programa ::= NT$0 lista_programa 
            {
              TreeNode RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (TreeNode) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		RESULT = program;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("root_programa",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // NT$0 ::= 
            {
              TreeNode RESULT =null;
 
		init_types();
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

