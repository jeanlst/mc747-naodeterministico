
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Jun 01 00:38:56 BRT 2008
//----------------------------------------------------

package pl747.sintatico;

import java.util.*;
import java_cup.runtime.Symbol;
import pl747.TreeNode;
import pl747.TreeNodeFactory;
import pl747.PL747Consts;
import pl747.semantico.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Jun 01 00:38:56 BRT 2008
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\166\000\002\061\002\000\002\037\004\000\002\002" +
    "\004\000\002\056\003\000\002\056\004\000\002\060\003" +
    "\000\002\060\003\000\002\060\004\000\002\060\003\000" +
    "\002\060\003\000\002\004\005\000\002\004\005\000\002" +
    "\002\003\000\002\002\004\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\012\003" +
    "\000\002\012\004\000\002\041\003\000\002\041\005\000" +
    "\002\005\003\000\002\005\005\000\002\043\005\000\002" +
    "\043\005\000\002\043\006\000\002\043\006\000\002\013" +
    "\006\000\002\044\005\000\002\044\005\000\002\044\006" +
    "\000\002\044\006\000\002\007\007\000\002\010\003\000" +
    "\002\010\004\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\011\005\000\002\042" +
    "\003\000\002\042\005\000\002\022\005\000\002\006\003" +
    "\000\002\006\003\000\002\014\003\000\002\014\005\000" +
    "\002\015\003\000\002\015\005\000\002\016\003\000\002" +
    "\016\004\000\002\016\005\000\002\017\003\000\002\017" +
    "\005\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\005\000\002\020\004\000" +
    "\002\052\003\000\002\052\003\000\002\053\003\000\002" +
    "\053\003\000\002\053\003\000\002\053\003\000\002\053" +
    "\003\000\002\053\003\000\002\054\003\000\002\054\003" +
    "\000\002\055\003\000\002\055\003\000\002\055\003\000" +
    "\002\023\003\000\002\023\005\000\002\025\004\000\002" +
    "\025\005\000\002\025\003\000\002\051\005\000\002\051" +
    "\006\000\002\027\007\000\002\027\011\000\002\026\003" +
    "\000\002\026\003\000\002\030\004\000\002\030\003\000" +
    "\002\030\004\000\002\030\003\000\002\030\003\000\002" +
    "\030\003\000\002\030\003\000\002\030\003\000\002\031" +
    "\005\000\002\050\003\000\002\050\004\000\002\032\007" +
    "\000\002\032\011\000\002\032\012\000\002\032\012\000" +
    "\002\057\003\000\002\035\010\000\002\040\007\000\002" +
    "\040\010\000\002\036\007\000\002\046\003\000\002\046" +
    "\002\000\002\045\003\000\002\045\005\000\002\034\004" +
    "\000\002\034\005\000\002\021\004\000\002\021\005\000" +
    "\002\024\006\000\002\024\005\000\002\047\003\000\002" +
    "\047\005\000\002\033\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\342\000\020\044\001\045\001\046\001\047\001\050" +
    "\001\051\001\052\001\001\002\000\020\044\012\045\025" +
    "\046\013\047\014\050\020\051\030\052\023\001\002\000" +
    "\004\002\006\001\002\000\004\002\uffff\001\002\000\022" +
    "\002\000\044\012\045\025\046\013\047\014\050\020\051" +
    "\030\052\023\001\002\000\010\010\272\052\ufff5\055\ufff5" +
    "\001\002\000\006\052\333\055\332\001\002\000\004\014" +
    "\313\001\002\000\012\010\ufff3\012\ufff3\052\ufff3\055\ufff3" +
    "\001\002\000\012\010\ufff2\012\ufff2\052\ufff2\055\ufff2\001" +
    "\002\000\022\002\ufffb\044\ufffb\045\ufffb\046\ufffb\047\ufffb" +
    "\050\ufffb\051\ufffb\052\ufffb\001\002\000\022\002\ufffe\044" +
    "\ufffe\045\ufffe\046\ufffe\047\ufffe\050\ufffe\051\ufffe\052\ufffe" +
    "\001\002\000\006\010\272\055\uffef\001\002\000\012\010" +
    "\ufff0\012\ufff0\052\ufff0\055\ufff0\001\002\000\022\002\ufff8" +
    "\044\ufff8\045\ufff8\046\ufff8\047\ufff8\050\ufff8\051\ufff8\052" +
    "\ufff8\001\002\000\004\004\311\001\002\000\004\012\167" +
    "\001\002\000\004\055\054\001\002\000\004\055\031\001" +
    "\002\000\022\002\ufffc\044\ufffc\045\ufffc\046\ufffc\047\ufffc" +
    "\050\ufffc\051\ufffc\052\ufffc\001\002\000\022\002\ufff9\044" +
    "\ufff9\045\ufff9\046\ufff9\047\ufff9\050\ufff9\051\ufff9\052\ufff9" +
    "\001\002\000\012\010\ufff1\012\ufff1\052\ufff1\055\ufff1\001" +
    "\002\000\004\007\032\001\002\000\016\014\033\017\041" +
    "\054\037\056\034\057\040\060\042\001\002\000\016\014" +
    "\033\017\041\054\037\056\034\057\040\060\042\001\002" +
    "\000\054\004\uffdc\005\uffdc\011\uffdc\013\uffdc\015\uffdc\016" +
    "\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc" +
    "\026\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\037" +
    "\uffdc\041\uffdc\042\uffdc\001\002\000\054\004\uffdd\005\uffdd" +
    "\011\uffdd\013\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd\021" +
    "\uffdd\022\uffdd\023\uffdd\024\uffdd\026\uffdd\027\uffdd\030\uffdd" +
    "\031\uffdd\032\uffdd\033\uffdd\037\uffdd\041\uffdd\042\uffdd\001" +
    "\002\000\004\004\044\001\002\000\054\004\uffdf\005\uffdf" +
    "\011\uffdf\013\uffdf\015\uffdf\016\uffdf\017\uffdf\020\uffdf\021" +
    "\uffdf\022\uffdf\023\uffdf\024\uffdf\026\uffdf\027\uffdf\030\uffdf" +
    "\031\uffdf\032\uffdf\033\uffdf\037\uffdf\041\uffdf\042\uffdf\001" +
    "\002\000\054\004\uffdb\005\uffdb\011\uffdb\013\uffdb\015\uffdb" +
    "\016\uffdb\017\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb\024" +
    "\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb" +
    "\037\uffdb\041\uffdb\042\uffdb\001\002\000\004\054\043\001" +
    "\002\000\054\004\uffda\005\uffda\011\uffda\013\uffda\015\uffda" +
    "\016\uffda\017\uffda\020\uffda\021\uffda\022\uffda\023\uffda\024" +
    "\uffda\026\uffda\027\uffda\030\uffda\031\uffda\032\uffda\033\uffda" +
    "\037\uffda\041\uffda\042\uffda\001\002\000\054\004\uffde\005" +
    "\uffde\011\uffde\013\uffde\015\uffde\016\uffde\017\uffde\020\uffde" +
    "\021\uffde\022\uffde\023\uffde\024\uffde\026\uffde\027\uffde\030" +
    "\uffde\031\uffde\032\uffde\033\uffde\037\uffde\041\uffde\042\uffde" +
    "\001\002\000\022\002\uffe0\044\uffe0\045\uffe0\046\uffe0\047" +
    "\uffe0\050\uffe0\051\uffe0\052\uffe0\001\002\000\006\005\uffd8" +
    "\015\uffd8\001\002\000\006\005\047\015\050\001\002\000" +
    "\016\014\033\017\041\054\037\056\034\057\040\060\042" +
    "\001\002\000\054\004\uffd9\005\uffd9\011\uffd9\013\uffd9\015" +
    "\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9" +
    "\024\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033" +
    "\uffd9\037\uffd9\041\uffd9\042\uffd9\001\002\000\006\005\uffd7" +
    "\015\uffd7\001\002\000\006\004\uffed\005\uffed\001\002\000" +
    "\006\004\165\005\164\001\002\000\010\004\uffeb\005\uffeb" +
    "\007\055\001\002\000\036\012\065\014\033\016\060\017" +
    "\072\025\062\046\013\047\014\050\020\051\030\054\037" +
    "\055\073\056\034\057\040\060\042\001\002\000\044\004" +
    "\uffd1\005\uffd1\011\uffd1\013\uffd1\016\060\017\151\023\uffd1" +
    "\024\uffd1\026\155\027\154\030\157\031\156\032\161\033" +
    "\152\037\uffd1\041\uffd1\042\uffd1\001\002\000\004\012\146" +
    "\001\002\000\034\012\uffbc\014\uffbc\017\uffbc\025\uffbc\046" +
    "\uffbc\047\uffbc\050\uffbc\051\uffbc\054\uffbc\055\uffbc\056\uffbc" +
    "\057\uffbc\060\uffbc\001\002\000\056\004\uffca\005\uffca\006" +
    "\106\007\143\011\uffca\013\uffca\016\uffca\017\uffca\020\uffca" +
    "\021\uffca\022\uffca\023\uffca\024\uffca\026\uffca\027\uffca\030" +
    "\uffca\031\uffca\032\uffca\033\uffca\037\uffca\041\uffca\042\uffca" +
    "\001\002\000\034\012\065\014\033\017\041\025\062\046" +
    "\013\047\014\050\020\051\030\054\037\055\073\056\034" +
    "\057\040\060\042\001\002\000\020\004\uffd5\005\uffd5\011" +
    "\uffd5\013\uffd5\037\uffd5\041\uffd5\042\uffd5\001\002\000\052" +
    "\004\uffc9\005\uffc9\011\uffc9\013\uffc9\016\uffc9\017\uffc9\020" +
    "\uffc9\021\uffc9\022\uffc9\023\uffc9\024\uffc9\026\uffc9\027\uffc9" +
    "\030\uffc9\031\uffc9\032\uffc9\033\uffc9\037\uffc9\041\uffc9\042" +
    "\uffc9\001\002\000\036\012\065\014\033\016\060\017\072" +
    "\025\062\046\013\047\014\050\020\051\030\054\037\055" +
    "\073\056\034\057\040\060\042\001\002\000\052\004\uffcf" +
    "\005\uffcf\011\uffcf\013\uffcf\016\uffcf\017\uffcf\020\136\021" +
    "\135\022\133\023\uffcf\024\uffcf\026\uffcf\027\uffcf\030\uffcf" +
    "\031\uffcf\032\uffcf\033\uffcf\037\uffcf\041\uffcf\042\uffcf\001" +
    "\002\000\020\004\uffd4\005\uffd4\011\uffd4\013\uffd4\037\uffd4" +
    "\041\uffd4\042\uffd4\001\002\000\052\004\uffc8\005\uffc8\011" +
    "\uffc8\013\uffc8\016\uffc8\017\uffc8\020\uffc8\021\uffc8\022\uffc8" +
    "\023\uffc8\024\uffc8\026\uffc8\027\uffc8\030\uffc8\031\uffc8\032" +
    "\uffc8\033\uffc8\037\uffc8\041\uffc8\042\uffc8\001\002\000\034" +
    "\012\065\014\033\017\041\025\062\046\013\047\014\050" +
    "\020\051\030\054\037\055\073\056\034\057\040\060\042" +
    "\001\002\000\034\012\uffbb\014\uffbb\017\uffbb\025\uffbb\046" +
    "\uffbb\047\uffbb\050\uffbb\051\uffbb\054\043\055\uffbb\056\uffbb" +
    "\057\uffbb\060\uffbb\001\002\000\062\004\uffb3\005\uffb3\006" +
    "\uffb3\007\uffb3\010\115\011\uffb3\012\123\013\uffb3\016\uffb3" +
    "\017\uffb3\020\uffb3\021\uffb3\022\uffb3\023\uffb3\024\uffb3\026" +
    "\uffb3\027\uffb3\030\uffb3\031\uffb3\032\uffb3\033\uffb3\037\uffb3" +
    "\041\uffb3\042\uffb3\001\002\000\024\004\uffd3\005\uffd3\011" +
    "\uffd3\013\uffd3\023\102\024\103\037\uffd3\041\uffd3\042\uffd3" +
    "\001\002\000\052\004\uffc7\005\uffc7\011\uffc7\013\uffc7\016" +
    "\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7" +
    "\026\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7\033\uffc7\037" +
    "\uffc7\041\uffc7\042\uffc7\001\002\000\056\004\uffb7\005\uffb7" +
    "\006\uffb7\007\uffb7\011\uffb7\013\uffb7\016\uffb7\017\uffb7\020" +
    "\uffb7\021\uffb7\022\uffb7\023\uffb7\024\uffb7\026\uffb7\027\uffb7" +
    "\030\uffb7\031\uffb7\032\uffb7\033\uffb7\037\uffb7\041\uffb7\042" +
    "\uffb7\001\002\000\052\004\uffcc\005\uffcc\011\uffcc\013\uffcc" +
    "\016\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc\023\uffcc\024" +
    "\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc\032\uffcc\033\uffcc" +
    "\037\uffcc\041\uffcc\042\uffcc\001\002\000\006\004\uffea\005" +
    "\uffea\001\002\000\036\012\065\014\033\016\060\017\072" +
    "\025\062\046\013\047\014\050\020\051\030\054\037\055" +
    "\073\056\034\057\040\060\042\001\002\000\036\012\uffc4" +
    "\014\uffc4\016\uffc4\017\uffc4\025\uffc4\046\uffc4\047\uffc4\050" +
    "\uffc4\051\uffc4\054\uffc4\055\uffc4\056\uffc4\057\uffc4\060\uffc4" +
    "\001\002\000\036\012\uffc3\014\uffc3\016\uffc3\017\uffc3\025" +
    "\uffc3\046\uffc3\047\uffc3\050\uffc3\051\uffc3\054\uffc3\055\uffc3" +
    "\056\uffc3\057\uffc3\060\uffc3\001\002\000\054\004\uffca\005" +
    "\uffca\006\106\011\uffca\013\uffca\016\uffca\017\uffca\020\uffca" +
    "\021\uffca\022\uffca\023\uffca\024\uffca\026\uffca\027\uffca\030" +
    "\uffca\031\uffca\032\uffca\033\uffca\037\uffca\041\uffca\042\uffca" +
    "\001\002\000\020\004\uffd2\005\uffd2\011\uffd2\013\uffd2\037" +
    "\uffd2\041\uffd2\042\uffd2\001\002\000\006\012\111\055\110" +
    "\001\002\000\056\004\uffb6\005\uffb6\006\uffb6\007\uffb6\011" +
    "\uffb6\013\uffb6\016\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6" +
    "\023\uffb6\024\uffb6\026\uffb6\027\uffb6\030\uffb6\031\uffb6\032" +
    "\uffb6\033\uffb6\037\uffb6\041\uffb6\042\uffb6\001\002\000\060" +
    "\004\uffb3\005\uffb3\006\uffb3\007\uffb3\010\115\011\uffb3\013" +
    "\uffb3\016\uffb3\017\uffb3\020\uffb3\021\uffb3\022\uffb3\023\uffb3" +
    "\024\uffb3\026\uffb3\027\uffb3\030\uffb3\031\uffb3\032\uffb3\033" +
    "\uffb3\037\uffb3\041\uffb3\042\uffb3\001\002\000\006\012\111" +
    "\055\110\001\002\000\006\006\106\013\113\001\002\000" +
    "\056\004\uffb4\005\uffb4\006\uffb4\007\uffb4\011\uffb4\013\uffb4" +
    "\016\uffb4\017\uffb4\020\uffb4\021\uffb4\022\uffb4\023\uffb4\024" +
    "\uffb4\026\uffb4\027\uffb4\030\uffb4\031\uffb4\032\uffb4\033\uffb4" +
    "\037\uffb4\041\uffb4\042\uffb4\001\002\000\060\004\uffb5\005" +
    "\uffb5\006\uffb5\007\uffb5\010\120\011\uffb5\013\uffb5\016\uffb5" +
    "\017\uffb5\020\uffb5\021\uffb5\022\uffb5\023\uffb5\024\uffb5\026" +
    "\uffb5\027\uffb5\030\uffb5\031\uffb5\032\uffb5\033\uffb5\037\uffb5" +
    "\041\uffb5\042\uffb5\001\002\000\036\012\065\014\033\016" +
    "\060\017\072\025\062\046\013\047\014\050\020\051\030" +
    "\054\037\055\073\056\034\057\040\060\042\001\002\000" +
    "\004\011\117\001\002\000\060\004\uffb2\005\uffb2\006\uffb2" +
    "\007\uffb2\010\uffb2\011\uffb2\013\uffb2\016\uffb2\017\uffb2\020" +
    "\uffb2\021\uffb2\022\uffb2\023\uffb2\024\uffb2\026\uffb2\027\uffb2" +
    "\030\uffb2\031\uffb2\032\uffb2\033\uffb2\037\uffb2\041\uffb2\042" +
    "\uffb2\001\002\000\036\012\065\014\033\016\060\017\072" +
    "\025\062\046\013\047\014\050\020\051\030\054\037\055" +
    "\073\056\034\057\040\060\042\001\002\000\004\011\122" +
    "\001\002\000\060\004\uffb1\005\uffb1\006\uffb1\007\uffb1\010" +
    "\uffb1\011\uffb1\013\uffb1\016\uffb1\017\uffb1\020\uffb1\021\uffb1" +
    "\022\uffb1\023\uffb1\024\uffb1\026\uffb1\027\uffb1\030\uffb1\031" +
    "\uffb1\032\uffb1\033\uffb1\037\uffb1\041\uffb1\042\uffb1\001\002" +
    "\000\040\012\065\013\124\014\033\016\060\017\072\025" +
    "\062\046\013\047\014\050\020\051\030\054\037\055\073" +
    "\056\034\057\040\060\042\001\002\000\052\004\uff8f\005" +
    "\uff8f\011\uff8f\013\uff8f\016\uff8f\017\uff8f\020\uff8f\021\uff8f" +
    "\022\uff8f\023\uff8f\024\uff8f\026\uff8f\027\uff8f\030\uff8f\031" +
    "\uff8f\032\uff8f\033\uff8f\037\uff8f\041\uff8f\042\uff8f\001\002" +
    "\000\006\005\127\013\130\001\002\000\006\005\uff8e\013" +
    "\uff8e\001\002\000\036\012\065\014\033\016\060\017\072" +
    "\025\062\046\013\047\014\050\020\051\030\054\037\055" +
    "\073\056\034\057\040\060\042\001\002\000\052\004\uff90" +
    "\005\uff90\011\uff90\013\uff90\016\uff90\017\uff90\020\uff90\021" +
    "\uff90\022\uff90\023\uff90\024\uff90\026\uff90\027\uff90\030\uff90" +
    "\031\uff90\032\uff90\033\uff90\037\uff90\041\uff90\042\uff90\001" +
    "\002\000\006\005\uff8d\013\uff8d\001\002\000\052\004\uffce" +
    "\005\uffce\011\uffce\013\uffce\016\uffce\017\uffce\020\136\021" +
    "\135\022\133\023\uffce\024\uffce\026\uffce\027\uffce\030\uffce" +
    "\031\uffce\032\uffce\033\uffce\037\uffce\041\uffce\042\uffce\001" +
    "\002\000\034\012\uffb8\014\uffb8\017\uffb8\025\uffb8\046\uffb8" +
    "\047\uffb8\050\uffb8\051\uffb8\054\uffb8\055\uffb8\056\uffb8\057" +
    "\uffb8\060\uffb8\001\002\000\034\012\065\014\033\017\041" +
    "\025\062\046\013\047\014\050\020\051\030\054\037\055" +
    "\073\056\034\057\040\060\042\001\002\000\034\012\uffb9" +
    "\014\uffb9\017\uffb9\025\uffb9\046\uffb9\047\uffb9\050\uffb9\051" +
    "\uffb9\054\uffb9\055\uffb9\056\uffb9\057\uffb9\060\uffb9\001\002" +
    "\000\034\012\uffba\014\uffba\017\uffba\025\uffba\046\uffba\047" +
    "\uffba\050\uffba\051\uffba\054\uffba\055\uffba\056\uffba\057\uffba" +
    "\060\uffba\001\002\000\052\004\uffcb\005\uffcb\011\uffcb\013" +
    "\uffcb\016\uffcb\017\uffcb\020\uffcb\021\uffcb\022\uffcb\023\uffcb" +
    "\024\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb\033" +
    "\uffcb\037\uffcb\041\uffcb\042\uffcb\001\002\000\042\006\106" +
    "\007\143\013\113\016\uffca\017\uffca\020\uffca\021\uffca\022" +
    "\uffca\023\uffca\024\uffca\026\uffca\027\uffca\030\uffca\031\uffca" +
    "\032\uffca\033\uffca\001\002\000\004\013\142\001\002\000" +
    "\052\004\uffc6\005\uffc6\011\uffc6\013\uffc6\016\uffc6\017\uffc6" +
    "\020\uffc6\021\uffc6\022\uffc6\023\uffc6\024\uffc6\026\uffc6\027" +
    "\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\037\uffc6\041\uffc6" +
    "\042\uffc6\001\002\000\036\012\065\014\033\016\060\017" +
    "\072\025\062\046\013\047\014\050\020\051\030\054\037" +
    "\055\073\056\034\057\040\060\042\001\002\000\020\004" +
    "\uffd6\005\uffd6\011\uffd6\013\uffd6\037\uffd6\041\uffd6\042\uffd6" +
    "\001\002\000\052\004\uffc5\005\uffc5\011\uffc5\013\uffc5\016" +
    "\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5\024\uffc5" +
    "\026\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5\037" +
    "\uffc5\041\uffc5\042\uffc5\001\002\000\036\012\065\014\033" +
    "\016\060\017\072\025\062\046\013\047\014\050\020\051" +
    "\030\054\037\055\073\056\034\057\040\060\042\001\002" +
    "\000\004\013\150\001\002\000\112\002\uff8c\004\uff8c\005" +
    "\uff8c\011\uff8c\012\uff8c\013\uff8c\015\uff8c\016\uff8c\017\uff8c" +
    "\020\uff8c\021\uff8c\022\uff8c\023\uff8c\024\uff8c\026\uff8c\027" +
    "\uff8c\030\uff8c\031\uff8c\032\uff8c\033\uff8c\034\uff8c\035\uff8c" +
    "\036\uff8c\037\uff8c\040\uff8c\041\uff8c\042\uff8c\044\uff8c\045" +
    "\uff8c\046\uff8c\047\uff8c\050\uff8c\051\uff8c\052\uff8c\053\uff8c" +
    "\055\uff8c\001\002\000\034\012\uffbb\014\uffbb\017\uffbb\025" +
    "\uffbb\046\uffbb\047\uffbb\050\uffbb\051\uffbb\054\uffbb\055\uffbb" +
    "\056\uffbb\057\uffbb\060\uffbb\001\002\000\036\012\uffbe\014" +
    "\uffbe\016\uffbe\017\uffbe\025\uffbe\046\uffbe\047\uffbe\050\uffbe" +
    "\051\uffbe\054\uffbe\055\uffbe\056\uffbe\057\uffbe\060\uffbe\001" +
    "\002\000\034\012\065\014\033\017\041\025\062\046\013" +
    "\047\014\050\020\051\030\054\037\055\073\056\034\057" +
    "\040\060\042\001\002\000\036\012\uffc1\014\uffc1\016\uffc1" +
    "\017\uffc1\025\uffc1\046\uffc1\047\uffc1\050\uffc1\051\uffc1\054" +
    "\uffc1\055\uffc1\056\uffc1\057\uffc1\060\uffc1\001\002\000\036" +
    "\012\uffc2\014\uffc2\016\uffc2\017\uffc2\025\uffc2\046\uffc2\047" +
    "\uffc2\050\uffc2\051\uffc2\054\uffc2\055\uffc2\056\uffc2\057\uffc2" +
    "\060\uffc2\001\002\000\036\012\uffbd\014\uffbd\016\uffbd\017" +
    "\uffbd\025\uffbd\046\uffbd\047\uffbd\050\uffbd\051\uffbd\054\uffbd" +
    "\055\uffbd\056\uffbd\057\uffbd\060\uffbd\001\002\000\036\012" +
    "\uffc0\014\uffc0\016\uffc0\017\uffc0\025\uffc0\046\uffc0\047\uffc0" +
    "\050\uffc0\051\uffc0\054\uffc0\055\uffc0\056\uffc0\057\uffc0\060" +
    "\uffc0\001\002\000\036\012\065\014\033\016\060\017\072" +
    "\025\062\046\013\047\014\050\020\051\030\054\037\055" +
    "\073\056\034\057\040\060\042\001\002\000\036\012\uffbf" +
    "\014\uffbf\016\uffbf\017\uffbf\025\uffbf\046\uffbf\047\uffbf\050" +
    "\uffbf\051\uffbf\054\uffbf\055\uffbf\056\uffbf\057\uffbf\060\uffbf" +
    "\001\002\000\030\004\uffd0\005\uffd0\011\uffd0\013\uffd0\016" +
    "\060\017\151\023\uffd0\024\uffd0\037\uffd0\041\uffd0\042\uffd0" +
    "\001\002\000\052\004\uffcd\005\uffcd\011\uffcd\013\uffcd\016" +
    "\uffcd\017\uffcd\020\136\021\135\022\133\023\uffcd\024\uffcd" +
    "\026\uffcd\027\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd\037" +
    "\uffcd\041\uffcd\042\uffcd\001\002\000\004\055\054\001\002" +
    "\000\046\002\ufff6\004\ufff6\012\ufff6\015\ufff6\034\ufff6\035" +
    "\ufff6\036\ufff6\037\ufff6\040\ufff6\044\ufff6\045\ufff6\046\ufff6" +
    "\047\ufff6\050\ufff6\051\ufff6\052\ufff6\053\ufff6\055\ufff6\001" +
    "\002\000\006\004\uffec\005\uffec\001\002\000\016\013\uff97" +
    "\043\173\046\013\047\014\050\020\051\030\001\002\000" +
    "\006\005\307\013\uff98\001\002\000\006\005\uff96\013\uff96" +
    "\001\002\000\004\055\306\001\002\000\012\046\013\047" +
    "\014\050\020\051\030\001\002\000\004\013\175\001\002" +
    "\000\036\004\204\012\111\014\212\034\211\036\205\037" +
    "\214\040\220\044\012\046\013\047\014\050\020\051\030" +
    "\053\207\055\073\001\002\000\046\002\uffa9\004\uffa9\012" +
    "\uffa9\015\uffa9\034\uffa9\035\uffa9\036\uffa9\037\uffa9\040\uffa9" +
    "\044\uffa9\045\uffa9\046\uffa9\047\uffa9\050\uffa9\051\uffa9\052" +
    "\uffa9\053\uffa9\055\uffa9\001\002\000\046\002\uffa8\004\uffa8" +
    "\012\uffa8\015\uffa8\034\uffa8\035\uffa8\036\uffa8\037\uffa8\040" +
    "\uffa8\044\uffa8\045\uffa8\046\uffa8\047\uffa8\050\uffa8\051\uffa8" +
    "\052\uffa8\053\uffa8\055\uffa8\001\002\000\010\010\272\012" +
    "\146\055\ufff5\001\002\000\046\002\uffa7\004\uffa7\012\uffa7" +
    "\015\uffa7\034\uffa7\035\uffa7\036\uffa7\037\uffa7\040\uffa7\044" +
    "\uffa7\045\uffa7\046\uffa7\047\uffa7\050\uffa7\051\uffa7\052\uffa7" +
    "\053\uffa7\055\uffa7\001\002\000\004\055\054\001\002\000" +
    "\046\002\uffa5\004\uffa5\012\uffa5\015\uffa5\034\uffa5\035\uffa5" +
    "\036\uffa5\037\uffa5\040\uffa5\044\uffa5\045\uffa5\046\uffa5\047" +
    "\uffa5\050\uffa5\051\uffa5\052\uffa5\053\uffa5\055\uffa5\001\002" +
    "\000\046\002\uff9d\004\uff9d\012\uff9d\015\uff9d\034\uff9d\035" +
    "\uff9d\036\uff9d\037\uff9d\040\uff9d\044\uff9d\045\uff9d\046\uff9d" +
    "\047\uff9d\050\uff9d\051\uff9d\052\uff9d\053\uff9d\055\uff9d\001" +
    "\002\000\004\012\263\001\002\000\006\006\106\007\143" +
    "\001\002\000\040\004\260\012\065\014\033\016\060\017" +
    "\072\025\062\046\013\047\014\050\020\051\030\054\037" +
    "\055\073\056\034\057\040\060\042\001\002\000\004\004" +
    "\257\001\002\000\004\012\251\001\002\000\034\004\204" +
    "\012\111\034\211\036\205\037\214\040\220\044\012\046" +
    "\013\047\014\050\020\051\030\053\207\055\073\001\002" +
    "\000\046\002\uffae\004\uffae\012\uffae\015\uffae\034\uffae\035" +
    "\uffae\036\uffae\037\uffae\040\uffae\044\uffae\045\uffae\046\uffae" +
    "\047\uffae\050\uffae\051\uffae\052\uffae\053\uffae\055\uffae\001" +
    "\002\000\036\004\204\012\111\014\212\034\211\036\205" +
    "\037\214\040\220\044\012\046\013\047\014\050\020\051" +
    "\030\053\207\055\073\001\002\000\046\002\uffab\004\uffab" +
    "\012\uffab\015\uffab\034\uffab\035\uffab\036\uffab\037\uffab\040" +
    "\uffab\044\uffab\045\uffab\046\uffab\047\uffab\050\uffab\051\uffab" +
    "\052\uffab\053\uffab\055\uffab\001\002\000\046\002\uffa6\004" +
    "\uffa6\012\uffa6\015\uffa6\034\uffa6\035\uffa6\036\uffa6\037\uffa6" +
    "\040\uffa6\044\uffa6\045\uffa6\046\uffa6\047\uffa6\050\uffa6\051" +
    "\uffa6\052\uffa6\053\uffa6\055\uffa6\001\002\000\004\004\236" +
    "\001\002\000\006\012\111\055\110\001\002\000\046\002" +
    "\uffad\004\uffad\012\uffad\015\uffad\034\uffad\035\uffad\036\uffad" +
    "\037\uffad\040\uffad\044\uffad\045\uffad\046\uffad\047\uffad\050" +
    "\uffad\051\uffad\052\uffad\053\uffad\055\uffad\001\002\000\022" +
    "\002\uff9b\044\uff9b\045\uff9b\046\uff9b\047\uff9b\050\uff9b\051" +
    "\uff9b\052\uff9b\001\002\000\006\006\106\007\224\001\002" +
    "\000\036\012\065\014\033\016\060\017\072\025\062\046" +
    "\013\047\014\050\020\051\030\054\037\055\073\056\034" +
    "\057\040\060\042\001\002\000\006\041\226\042\227\001" +
    "\002\000\036\012\065\014\033\016\060\017\072\025\062" +
    "\046\013\047\014\050\020\051\030\054\037\055\073\056" +
    "\034\057\040\060\042\001\002\000\036\012\065\014\033" +
    "\016\060\017\072\025\062\046\013\047\014\050\020\051" +
    "\030\054\037\055\073\056\034\057\040\060\042\001\002" +
    "\000\004\037\231\001\002\000\036\004\204\012\111\014" +
    "\212\034\211\036\205\037\214\040\220\044\012\046\013" +
    "\047\014\050\020\051\030\053\207\055\073\001\002\000" +
    "\046\002\uff9e\004\uff9e\012\uff9e\015\uff9e\034\uff9e\035\uff9e" +
    "\036\uff9e\037\uff9e\040\uff9e\044\uff9e\045\uff9e\046\uff9e\047" +
    "\uff9e\050\uff9e\051\uff9e\052\uff9e\053\uff9e\055\uff9e\001\002" +
    "\000\004\037\234\001\002\000\036\004\204\012\111\014" +
    "\212\034\211\036\205\037\214\040\220\044\012\046\013" +
    "\047\014\050\020\051\030\053\207\055\073\001\002\000" +
    "\046\002\uff9f\004\uff9f\012\uff9f\015\uff9f\034\uff9f\035\uff9f" +
    "\036\uff9f\037\uff9f\040\uff9f\044\uff9f\045\uff9f\046\uff9f\047" +
    "\uff9f\050\uff9f\051\uff9f\052\uff9f\053\uff9f\055\uff9f\001\002" +
    "\000\046\002\uffaa\004\uffaa\012\uffaa\015\uffaa\034\uffaa\035" +
    "\uffaa\036\uffaa\037\uffaa\040\uffaa\044\uffaa\045\uffaa\046\uffaa" +
    "\047\uffaa\050\uffaa\051\uffaa\052\uffaa\053\uffaa\055\uffaa\001" +
    "\002\000\004\036\240\001\002\000\004\012\241\001\002" +
    "\000\036\012\065\014\033\016\060\017\072\025\062\046" +
    "\013\047\014\050\020\051\030\054\037\055\073\056\034" +
    "\057\040\060\042\001\002\000\004\013\243\001\002\000" +
    "\004\004\244\001\002\000\046\002\uffa0\004\uffa0\012\uffa0" +
    "\015\uffa0\034\uffa0\035\uffa0\036\uffa0\037\uffa0\040\uffa0\044" +
    "\uffa0\045\uffa0\046\uffa0\047\uffa0\050\uffa0\051\uffa0\052\uffa0" +
    "\053\uffa0\055\uffa0\001\002\000\036\004\uffa3\012\uffa3\015" +
    "\uffa3\034\uffa3\036\uffa3\037\uffa3\040\uffa3\044\uffa3\046\uffa3" +
    "\047\uffa3\050\uffa3\051\uffa3\053\uffa3\055\uffa3\001\002\000" +
    "\036\004\204\012\111\015\247\034\211\036\205\037\214" +
    "\040\220\044\012\046\013\047\014\050\020\051\030\053" +
    "\207\055\073\001\002\000\046\002\uffa4\004\uffa4\012\uffa4" +
    "\015\uffa4\034\uffa4\035\uffa4\036\uffa4\037\uffa4\040\uffa4\044" +
    "\uffa4\045\uffa4\046\uffa4\047\uffa4\050\uffa4\051\uffa4\052\uffa4" +
    "\053\uffa4\055\uffa4\001\002\000\036\004\uffa2\012\uffa2\015" +
    "\uffa2\034\uffa2\036\uffa2\037\uffa2\040\uffa2\044\uffa2\046\uffa2" +
    "\047\uffa2\050\uffa2\051\uffa2\053\uffa2\055\uffa2\001\002\000" +
    "\036\012\065\014\033\016\060\017\072\025\062\046\013" +
    "\047\014\050\020\051\030\054\037\055\073\056\034\057" +
    "\040\060\042\001\002\000\004\013\253\001\002\000\036" +
    "\004\204\012\111\014\212\034\211\036\205\037\214\040" +
    "\220\044\012\046\013\047\014\050\020\051\030\053\207" +
    "\055\073\001\002\000\046\002\uffb0\004\uffb0\012\uffb0\015" +
    "\uffb0\034\uffb0\035\255\036\uffb0\037\uffb0\040\uffb0\044\uffb0" +
    "\045\uffb0\046\uffb0\047\uffb0\050\uffb0\051\uffb0\052\uffb0\053" +
    "\uffb0\055\uffb0\001\002\000\036\004\204\012\111\014\212" +
    "\034\211\036\205\037\214\040\220\044\012\046\013\047" +
    "\014\050\020\051\030\053\207\055\073\001\002\000\046" +
    "\002\uffaf\004\uffaf\012\uffaf\015\uffaf\034\uffaf\035\uffaf\036" +
    "\uffaf\037\uffaf\040\uffaf\044\uffaf\045\uffaf\046\uffaf\047\uffaf" +
    "\050\uffaf\051\uffaf\052\uffaf\053\uffaf\055\uffaf\001\002\000" +
    "\046\002\uffac\004\uffac\012\uffac\015\uffac\034\uffac\035\uffac" +
    "\036\uffac\037\uffac\040\uffac\044\uffac\045\uffac\046\uffac\047" +
    "\uffac\050\uffac\051\uffac\052\uffac\053\uffac\055\uffac\001\002" +
    "\000\046\002\uff92\004\uff92\012\uff92\015\uff92\034\uff92\035" +
    "\uff92\036\uff92\037\uff92\040\uff92\044\uff92\045\uff92\046\uff92" +
    "\047\uff92\050\uff92\051\uff92\052\uff92\053\uff92\055\uff92\001" +
    "\002\000\004\004\262\001\002\000\046\002\uff91\004\uff91" +
    "\012\uff91\015\uff91\034\uff91\035\uff91\036\uff91\037\uff91\040" +
    "\uff91\044\uff91\045\uff91\046\uff91\047\uff91\050\uff91\051\uff91" +
    "\052\uff91\053\uff91\055\uff91\001\002\000\036\012\065\014" +
    "\033\016\060\017\072\025\062\046\013\047\014\050\020" +
    "\051\030\054\037\055\073\056\034\057\040\060\042\001" +
    "\002\000\004\013\265\001\002\000\036\004\204\012\111" +
    "\014\212\034\211\036\205\037\214\040\220\044\012\046" +
    "\013\047\014\050\020\051\030\053\207\055\073\001\002" +
    "\000\046\002\uffa1\004\uffa1\012\uffa1\015\uffa1\034\uffa1\035" +
    "\uffa1\036\uffa1\037\uffa1\040\uffa1\044\uffa1\045\uffa1\046\uffa1" +
    "\047\uffa1\050\uffa1\051\uffa1\052\uffa1\053\uffa1\055\uffa1\001" +
    "\002\000\006\004\270\005\164\001\002\000\046\002\ufff7" +
    "\004\ufff7\012\ufff7\015\ufff7\034\ufff7\035\ufff7\036\ufff7\037" +
    "\ufff7\040\ufff7\044\ufff7\045\ufff7\046\ufff7\047\ufff7\050\ufff7" +
    "\051\ufff7\052\ufff7\053\ufff7\055\ufff7\001\002\000\010\010" +
    "\277\052\ufff4\055\ufff4\001\002\000\006\054\274\055\273" +
    "\001\002\000\004\011\276\001\002\000\004\011\275\001" +
    "\002\000\010\010\uffe9\052\uffe9\055\uffe9\001\002\000\010" +
    "\010\uffe8\052\uffe8\055\uffe8\001\002\000\006\054\301\055" +
    "\300\001\002\000\004\011\303\001\002\000\004\011\302" +
    "\001\002\000\010\010\uffe7\052\uffe7\055\uffe7\001\002\000" +
    "\010\010\uffe6\052\uffe6\055\uffe6\001\002\000\004\055\305" +
    "\001\002\000\006\005\uff93\013\uff93\001\002\000\006\005" +
    "\uff94\013\uff94\001\002\000\014\043\173\046\013\047\014" +
    "\050\020\051\030\001\002\000\006\005\uff95\013\uff95\001" +
    "\002\000\022\002\ufffa\044\ufffa\045\ufffa\046\ufffa\047\ufffa" +
    "\050\ufffa\051\ufffa\052\ufffa\001\002\000\006\010\277\055" +
    "\uffee\001\002\000\014\044\012\046\013\047\014\050\020" +
    "\051\030\001\002\000\016\015\325\044\012\046\013\047" +
    "\014\050\020\051\030\001\002\000\004\055\054\001\002" +
    "\000\004\055\054\001\002\000\006\004\320\005\164\001" +
    "\002\000\016\015\uffe4\044\uffe4\046\uffe4\047\uffe4\050\uffe4" +
    "\051\uffe4\001\002\000\006\004\322\005\164\001\002\000" +
    "\016\015\uffe3\044\uffe3\046\uffe3\047\uffe3\050\uffe3\051\uffe3" +
    "\001\002\000\004\055\054\001\002\000\004\055\054\001" +
    "\002\000\006\010\uffe5\055\uffe5\001\002\000\006\004\327" +
    "\005\164\001\002\000\016\015\uffe2\044\uffe2\046\uffe2\047" +
    "\uffe2\050\uffe2\051\uffe2\001\002\000\006\004\331\005\164" +
    "\001\002\000\016\015\uffe1\044\uffe1\046\uffe1\047\uffe1\050" +
    "\uffe1\051\uffe1\001\002\000\012\004\uffeb\005\uffeb\007\055" +
    "\012\340\001\002\000\004\012\334\001\002\000\016\013" +
    "\uff97\043\173\046\013\047\014\050\020\051\030\001\002" +
    "\000\004\013\336\001\002\000\036\004\204\012\111\014" +
    "\212\034\211\036\205\037\214\040\220\044\012\046\013" +
    "\047\014\050\020\051\030\053\207\055\073\001\002\000" +
    "\022\002\uff9a\044\uff9a\045\uff9a\046\uff9a\047\uff9a\050\uff9a" +
    "\051\uff9a\052\uff9a\001\002\000\016\013\uff97\043\173\046" +
    "\013\047\014\050\020\051\030\001\002\000\004\013\342" +
    "\001\002\000\036\004\204\012\111\014\212\034\211\036" +
    "\205\037\214\040\220\044\012\046\013\047\014\050\020" +
    "\051\030\053\207\055\073\001\002\000\022\002\uff9c\044" +
    "\uff9c\045\uff9c\046\uff9c\047\uff9c\050\uff9c\051\uff9c\052\uff9c" +
    "\001\002\000\022\002\ufffd\044\ufffd\045\ufffd\046\ufffd\047" +
    "\ufffd\050\ufffd\051\ufffd\052\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\342\000\006\037\004\061\003\001\001\000\030\002" +
    "\010\003\007\004\025\007\014\012\023\013\016\035\026" +
    "\036\021\040\020\056\006\060\015\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\002\010\003\007\004\025" +
    "\007\014\012\023\013\016\035\026\036\021\040\020\060" +
    "\343\001\001\000\004\043\270\001\001\000\006\005\051" +
    "\041\266\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\043\311\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\051\041\052" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\010\035" +
    "\011\034\001\001\000\010\010\044\011\034\042\045\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\010\050\011\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\003\056\006" +
    "\077\010\063\011\034\014\066\015\073\016\055\017\065" +
    "\020\076\022\062\023\060\024\074\025\075\033\067\054" +
    "\070\001\001\000\006\053\157\054\152\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\003" +
    "\056\010\063\011\034\020\144\023\103\024\074\025\075" +
    "\033\067\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\003\056\006\140\010\063\011\034\014\066\015\073" +
    "\016\055\017\065\020\076\022\062\023\137\024\074\025" +
    "\075\033\067\054\070\001\001\000\004\055\133\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\003\056\010" +
    "\063\011\034\017\131\020\076\023\103\024\074\025\075" +
    "\033\067\001\001\000\002\001\001\000\004\051\113\001" +
    "\001\000\004\052\100\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\003" +
    "\056\010\063\011\034\015\104\016\055\017\065\020\076" +
    "\023\103\024\074\025\075\033\067\054\070\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\025\106\001\001\000\002\001\001\000" +
    "\004\051\113\001\001\000\006\023\111\025\075\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\003\056\006\115\010\063\011\034\014\066\015\073" +
    "\016\055\017\065\020\076\022\062\023\060\024\074\025" +
    "\075\033\067\054\070\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\003\056\006\120\010\063\011\034\014" +
    "\066\015\073\016\055\017\065\020\076\022\062\023\060" +
    "\024\074\025\075\033\067\054\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\003\056\006\125\010\063" +
    "\011\034\014\066\015\073\016\055\017\065\020\076\022" +
    "\062\023\060\024\074\025\075\033\067\047\124\054\070" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\003\056\006\130\010\063\011\034\014\066" +
    "\015\073\016\055\017\065\020\076\022\062\023\060\024" +
    "\074\025\075\033\067\054\070\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\055\133\001\001\000\002\001" +
    "\001\000\022\003\056\010\063\011\034\020\136\023\103" +
    "\024\074\025\075\033\067\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\003\056\006\143\010" +
    "\063\011\034\014\066\015\073\016\055\017\065\020\076" +
    "\022\062\023\060\024\074\025\075\033\067\054\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\003\056" +
    "\006\146\010\063\011\034\014\066\015\073\016\055\017" +
    "\065\020\076\022\062\023\060\024\074\025\075\033\067" +
    "\054\070\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\003\056\010\063" +
    "\011\034\017\162\020\076\023\103\024\074\025\075\033" +
    "\067\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\003\056\010\063\011" +
    "\034\016\161\017\065\020\076\023\103\024\074\025\075" +
    "\033\067\054\070\001\001\000\002\001\001\000\004\054" +
    "\152\001\001\000\004\055\133\001\001\000\004\005\165" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\002" +
    "\171\003\007\034\170\045\167\046\173\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\002" +
    "\303\003\007\001\001\000\002\001\001\000\044\002\201" +
    "\003\177\004\215\012\023\013\016\021\200\022\207\023" +
    "\205\024\216\025\075\026\221\027\175\030\212\031\220" +
    "\032\176\033\214\057\202\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\043\270\001\001\000\002\001\001" +
    "\000\006\005\051\041\266\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\003\056\006\260\010\063\011\034\014\066\015\073\016" +
    "\055\017\065\020\076\022\062\023\060\024\074\025\075" +
    "\033\067\054\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\002\201\003\177\004\215\012\023\013\016" +
    "\021\200\022\207\023\205\024\216\025\075\027\175\030" +
    "\244\032\176\033\214\050\245\057\202\001\001\000\002" +
    "\001\001\000\044\002\201\003\177\004\215\012\023\013" +
    "\016\021\200\022\207\023\205\024\216\025\075\026\236" +
    "\027\175\030\212\031\220\032\176\033\214\057\202\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\023\222\025\075\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\003\056\006\224" +
    "\010\063\011\034\014\066\015\073\016\055\017\065\020" +
    "\076\022\062\023\060\024\074\025\075\033\067\054\070" +
    "\001\001\000\002\001\001\000\040\003\056\006\232\010" +
    "\063\011\034\014\066\015\073\016\055\017\065\020\076" +
    "\022\062\023\060\024\074\025\075\033\067\054\070\001" +
    "\001\000\040\003\056\006\227\010\063\011\034\014\066" +
    "\015\073\016\055\017\065\020\076\022\062\023\060\024" +
    "\074\025\075\033\067\054\070\001\001\000\002\001\001" +
    "\000\044\002\201\003\177\004\215\012\023\013\016\021" +
    "\200\022\207\023\205\024\216\025\075\026\231\027\175" +
    "\030\212\031\220\032\176\033\214\057\202\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\002\201\003\177" +
    "\004\215\012\023\013\016\021\200\022\207\023\205\024" +
    "\216\025\075\026\234\027\175\030\212\031\220\032\176" +
    "\033\214\057\202\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\003\056" +
    "\006\241\010\063\011\034\014\066\015\073\016\055\017" +
    "\065\020\076\022\062\023\060\024\074\025\075\033\067" +
    "\054\070\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\002\201\003\177" +
    "\004\215\012\023\013\016\021\200\022\207\023\205\024" +
    "\216\025\075\027\175\030\247\032\176\033\214\057\202" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\003" +
    "\056\006\251\010\063\011\034\014\066\015\073\016\055" +
    "\017\065\020\076\022\062\023\060\024\074\025\075\033" +
    "\067\054\070\001\001\000\002\001\001\000\044\002\201" +
    "\003\177\004\215\012\023\013\016\021\200\022\207\023" +
    "\205\024\216\025\075\026\253\027\175\030\212\031\220" +
    "\032\176\033\214\057\202\001\001\000\002\001\001\000" +
    "\044\002\201\003\177\004\215\012\023\013\016\021\200" +
    "\022\207\023\205\024\216\025\075\026\255\027\175\030" +
    "\212\031\220\032\176\033\214\057\202\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\003\056\006\263\010\063" +
    "\011\034\014\066\015\073\016\055\017\065\020\076\022" +
    "\062\023\060\024\074\025\075\033\067\054\070\001\001" +
    "\000\002\001\001\000\044\002\201\003\177\004\215\012" +
    "\023\013\016\021\200\022\207\023\205\024\216\025\075" +
    "\026\265\027\175\030\212\031\220\032\176\033\214\057" +
    "\202\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\002\171\003\007\034" +
    "\307\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\002\315\003\007\012\314\013\016\044" +
    "\313\001\001\000\012\002\323\003\007\012\322\013\016" +
    "\001\001\000\006\005\051\041\320\001\001\000\006\005" +
    "\051\041\316\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\051\041" +
    "\327\001\001\000\006\005\051\041\325\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\002\171\003\007\034\170\045\167\046\334\001" +
    "\001\000\002\001\001\000\044\002\201\003\177\004\215" +
    "\012\023\013\016\021\200\022\207\023\205\024\216\025" +
    "\075\026\336\027\175\030\212\031\220\032\176\033\214" +
    "\057\202\001\001\000\002\001\001\000\014\002\171\003" +
    "\007\034\170\045\167\046\340\001\001\000\002\001\001" +
    "\000\044\002\201\003\177\004\215\012\023\013\016\021" +
    "\200\022\207\023\205\024\216\025\075\026\342\027\175" +
    "\030\212\031\220\032\176\033\214\057\202\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 2;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.next_token(); 
    }


	public boolean syntaxErrors;


	Scanner lexer;

	public Parser(Scanner lex) {
		super(lex);
		lexer = lex;
	}


	public void report_error(String message, Object info) {
		syntaxErrors = true;

		System.out.print(message);

		if ( !(info instanceof Symbol) ) return;
		Symbol symbol = (Symbol) info;

		if ( symbol.left < 0 || symbol.right < 0 ) return;

		System.out.println(" at line "+symbol.left+", column "+symbol.right);
		System.exit(1);
	}
	
	
	/* Tipos primitivos */
	
	public static void main(String args[]) throws Exception {
		Scanner scanner = null;
		try {
			scanner = new Scanner( new java.io.FileReader(args[0]) );
		}
		catch (java.io.FileNotFoundException e) {
			System.out.println("File not found : \""+args[0]+"\"");
			System.exit(1);
		}
		catch (java.io.IOException e) {
			System.out.println("Error opening file \""+args[0]+"\"");
			System.exit(1);
		}
		catch (ArrayIndexOutOfBoundsException e) {
			System.out.println("Usage : java Main <inputfile>");
			System.exit(1);
		}
	      
		try {
			Parser p = new Parser(scanner);
			Object result = p.parse().value;
			//System.out.println(((SampleNode)result).toSourceCode());
		}
		catch (java.io.IOException e) {
			System.out.println("An I/O error occured while parsing : \n"+e);
			System.exit(1);
		}
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {

 
	static TreeNode intType;
	static TreeNode boolType;
	static TreeNode charType;
	static TreeNode voidType;
	static TreeNodeFactory nodeFactory;
	TreeNode program;

	public void init_types() {
 		nodeFactory = new AbsNodeFactory();

		/* Inicializacao dos tipos primitivos */
		intType = nodeFactory.makePrimType("int");
		boolType = nodeFactory.makePrimType("boolean");
		charType = nodeFactory.makePrimType("char");
		voidType = nodeFactory.makePrimType("void");
		program = nodeFactory.makeProgram();
	}
	
	/*
	 * Funcao que adiciona os nos de TreeNode armazenado em um arraylist 
	 * em uma variavel Treenode
	 */
	private TreeNode addChildNodes(TreeNode parent, ArrayList list) {
		ArrayList <TreeNode>aList = list;
		for (TreeNode node : aList) {
			try {
				parent.addChild(node);
			} catch (Exception e) {
				System.err.println("Error");
			}
		}
		return parent;
	}
	

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // casting ::= tipo_primitivo LPAREN expressao RPAREN 
            {
              TreeNode RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		TreeNode tp = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TreeNode e = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		String ident = "";
		if (tp == intType) ident = "int";
		else if (tp == charType) ident = "char";
		else if (tp == boolType) ident = "bool";
		else if (tp == voidType) ident = "void";

		TreeNode cfuncao = nodeFactory.makeCallOp(ident);
		cfuncao.addChild(e);
		RESULT = cfuncao;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("casting",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // lista_valores ::= lista_valores COMA expressao 
            {
              ArrayList RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList lv = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode e = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		lv.add(e);
		RESULT = lv;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_valores",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // lista_valores ::= expressao 
            {
              ArrayList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode e = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		ArrayList lv = new ArrayList<TreeNode>();
		lv.add(e);
		RESULT = lv;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_valores",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // chamada_funcao ::= IDENTIFICADOR LPAREN RPAREN 
            {
              TreeNode RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
		RESULT = nodeFactory.makeCallOp(ident);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("chamada_funcao",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // chamada_funcao ::= IDENTIFICADOR LPAREN lista_valores RPAREN 
            {
              TreeNode RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList lv = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		TreeNode cfuncao = nodeFactory.makeCallOp(ident);

		cfuncao = this.addChildNodes(cfuncao, lv);
		RESULT = cfuncao;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("chamada_funcao",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // retorno_funcao ::= RETURN expressao SEMI 
            {
              TreeNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TreeNode e = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		RESULT = nodeFactory.makeReturnStat(e);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno_funcao",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // retorno_funcao ::= RETURN SEMI 
            {
              TreeNode RESULT =null;
		
		RESULT = nodeFactory.makeReturnStat(null);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno_funcao",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // parametro ::= REF tipo IDENTIFICADOR 
            {
              TreeNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TreeNode t = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int identleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = nodeFactory.makeParmDecl(ident, t, true);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametro",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // parametro ::= tipo IDENTIFICADOR 
            {
              TreeNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TreeNode t = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int identleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = nodeFactory.makeParmDecl(ident, t, false);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametro",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // lparametro ::= lparametro COMA parametro 
            {
              ArrayList RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList lp = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode p = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		lp.add(p);
		RESULT = lp;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lparametro",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // lparametro ::= parametro 
            {
              ArrayList RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode p = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		ArrayList lp = new ArrayList<TreeNode>();
		lp.add(p);
		RESULT = lp;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lparametro",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // lista_parametros ::= 
            {
              ArrayList RESULT =null;
		
		RESULT = null;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // lista_parametros ::= lparametro 
            {
              ArrayList RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList lp = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = lp;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // prototipo_funcao ::= tipo IDENTIFICADOR LPAREN lista_parametros RPAREN 
            {
              TreeNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		TreeNode t = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int identleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList lp = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		TreeNode dfuncao = nodeFactory.makeFunctionDecl(ident,t, null);
		if (lp != null)
			dfuncao = this.addChildNodes(dfuncao, lp);
		RESULT = dfuncao;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prototipo_funcao",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // declaracao_funcao_main ::= tipo MAIN LPAREN lista_parametros RPAREN comando 
            {
              TreeNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		TreeNode t = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList lp = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode c = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		TreeNode dfuncao = nodeFactory.makeFunctionDecl("main", t, c);
		if (lp != null)
			dfuncao = this.addChildNodes(dfuncao, lp);
		RESULT = dfuncao;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracao_funcao_main",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // declaracao_funcao_main ::= MAIN LPAREN lista_parametros RPAREN comando 
            {
              TreeNode RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList lp = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode c = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		TreeNode dfuncao = nodeFactory.makeFunctionDecl("main", null, c);
		if (lp != null)
			dfuncao = this.addChildNodes(dfuncao, lp);
		RESULT = dfuncao;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracao_funcao_main",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // declaracao_funcao ::= tipo IDENTIFICADOR LPAREN lista_parametros RPAREN comando 
            {
              TreeNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		TreeNode t = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int identleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList lp = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode c = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		TreeNode dfuncao = nodeFactory.makeFunctionDecl(ident,t, c);
		if (lp != null)
			dfuncao = this.addChildNodes(dfuncao, lp);
		RESULT = dfuncao;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracao_funcao",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // vazio ::= SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vazio",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // comando_repetitivo ::= FOR variavel ATRIBUTION expressao DOWNTO expressao DO comando 
            {
              TreeNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		TreeNode v = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		TreeNode e1 = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TreeNode e2 = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode c = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		TreeNode f = nodeFactory.makeForStat(v, e1, e2, false);
		f.addChild(c);
		RESULT = f;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_repetitivo",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // comando_repetitivo ::= FOR variavel ATRIBUTION expressao TO expressao DO comando 
            {
              TreeNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		TreeNode v = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		TreeNode e1 = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TreeNode e2 = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode c = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		TreeNode f = nodeFactory.makeForStat(v, e1, e2, true);
		f.addChild(c);
		RESULT = f;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_repetitivo",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // comando_repetitivo ::= DO comando WHILE LPAREN expressao RPAREN SEMI 
            {
              TreeNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		TreeNode c = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TreeNode e = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
		RESULT = nodeFactory.makeDoStat(e, c);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_repetitivo",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // comando_repetitivo ::= WHILE LPAREN expressao RPAREN comando 
            {
              TreeNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TreeNode e = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode c = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = nodeFactory.makeWhileStat(e, c);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_repetitivo",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // sequencia_comandos ::= sequencia_comandos comando_simples 
            {
              ArrayList RESULT =null;
		int lcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList lc = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode cs = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		lc.add(cs);
		RESULT = lc;		
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sequencia_comandos",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // sequencia_comandos ::= comando_simples 
            {
              ArrayList RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode cs = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		ArrayList lc = new ArrayList<TreeNode>();
		lc.add(cs);
		RESULT = lc;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sequencia_comandos",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // comando_composto ::= LBRACE sequencia_comandos RBRACE 
            {
              TreeNode RESULT =null;
		int scleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList sc = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		TreeNode corpo = nodeFactory.makeCompoundStat();
		corpo = this.addChildNodes(corpo, sc);
		RESULT = corpo; 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_composto",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // comando_simples ::= vazio 
            {
              TreeNode RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_simples",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // comando_simples ::= variaveis 
            {
              TreeNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode v = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_simples",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // comando_simples ::= retorno_funcao 
            {
              TreeNode RESULT =null;
		int rfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode rf = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = rf; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_simples",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // comando_simples ::= comando_repetitivo 
            {
              TreeNode RESULT =null;
		int crleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int crright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode cr = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = cr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_simples",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // comando_simples ::= comando_condicional 
            {
              TreeNode RESULT =null;
		int ccleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode cc = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = cc; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_simples",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // comando_simples ::= chamada_funcao SEMI 
            {
              TreeNode RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TreeNode cf = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = cf; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_simples",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // comando_simples ::= casting 
            {
              TreeNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode c = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_simples",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // comando_simples ::= atribuicao SEMI 
            {
              TreeNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TreeNode a = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_simples",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // comando ::= comando_composto 
            {
              TreeNode RESULT =null;
		int ccleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode cc = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = cc; 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // comando ::= comando_simples 
            {
              TreeNode RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode cs = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		TreeNode corpo = nodeFactory.makeCompoundStat();
		if (cs != null) {
			corpo.addChild(cs);
			RESULT = corpo; 
		} else {
			RESULT = null;
		}
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // comando_condicional ::= IF LPAREN expressao RPAREN comando ELSE comando 
            {
              TreeNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		TreeNode e = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TreeNode c1 = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode c2 = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = nodeFactory.makeIfStat(e, c1, c2);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_condicional",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // comando_condicional ::= IF LPAREN expressao RPAREN comando 
            {
              TreeNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TreeNode e = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode c = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = nodeFactory.makeIfStat(e, c, null);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando_condicional",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // vexpressao ::= vexpressao LBRACKET expressao RBRACKET 
            {
              ArrayList RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ArrayList le = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TreeNode e = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		le.add(e);
		RESULT = le;		
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vexpressao",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // vexpressao ::= LBRACKET expressao RBRACKET 
            {
              ArrayList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TreeNode e = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		ArrayList le = new ArrayList<TreeNode>();
		le.add(e);
		RESULT = le;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vexpressao",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // var ::= IDENTIFICADOR 
            {
              TreeNode RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = nodeFactory.makeVarOp(ident); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // var ::= LPAREN variavel RPAREN 
            {
              TreeNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TreeNode v = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // var ::= IDENTIFICADOR vexpressao 
            {
              TreeNode RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int veleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int veright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList ve = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		ArrayList <TreeNode> aList = ve;
		TreeNode p = nodeFactory.makeVarOp(ident);
		for (TreeNode indice : aList) {
			p = nodeFactory.makeOperation(PL747Consts.INDEX_OP, p, indice);
		}
		RESULT = p;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // variavel ::= variavel DOT var 
            {
              TreeNode RESULT =null;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TreeNode v2 = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode v1 = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = nodeFactory.makeOperation(PL747Consts.SEL_OP, v2, v1);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variavel",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // variavel ::= var 
            {
              TreeNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode v = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = v;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variavel",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // operador_multiplicativo ::= MOD 
            {
              Integer RESULT =null;
		 RESULT = PL747Consts.MOD_OP; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_multiplicativo",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // operador_multiplicativo ::= DIVIDE 
            {
              Integer RESULT =null;
		 RESULT = PL747Consts.DIV_OP; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_multiplicativo",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // operador_multiplicativo ::= TIMES 
            {
              Integer RESULT =null;
		 RESULT = PL747Consts.MULT_OP; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_multiplicativo",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // operador_aditivo ::= MINUS 
            {
              Integer RESULT =null;
		 RESULT = PL747Consts.SUB_OP; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_aditivo",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // operador_aditivo ::= PLUS 
            {
              Integer RESULT =null;
		 RESULT = PL747Consts.ADD_OP; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_aditivo",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // operador_relacional ::= MORE 
            {
              Integer RESULT =null;
		 RESULT = PL747Consts.GT_OP; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // operador_relacional ::= MEQUAL 
            {
              Integer RESULT =null;
		 RESULT = PL747Consts.GE_OP; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // operador_relacional ::= LEQUAL 
            {
              Integer RESULT =null;
		 RESULT = PL747Consts.LE_OP; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // operador_relacional ::= LESS 
            {
              Integer RESULT =null;
		 RESULT = PL747Consts.LT_OP; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // operador_relacional ::= NEQUAL 
            {
              Integer RESULT =null;
		 RESULT = PL747Consts.NE_OP; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // operador_relacional ::= EQUAL 
            {
              Integer RESULT =null;
		 RESULT = PL747Consts.EQ_OP; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // operador_logico ::= OR 
            {
              Integer RESULT =null;
		 RESULT = PL747Consts.OR_OP; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_logico",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // operador_logico ::= AND 
            {
              Integer RESULT =null;
		 RESULT = PL747Consts.AND_OP; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_logico",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // fator ::= NOT fator 
            {
              TreeNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode f = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			
		RESULT = nodeFactory.makeOperation(PL747Consts.NOT_OP, f, null);	
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fator",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // fator ::= LPAREN expressao RPAREN 
            {
              TreeNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TreeNode e = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fator",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // fator ::= chamada_funcao 
            {
              TreeNode RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode cf = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = cf; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fator",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // fator ::= casting 
            {
              TreeNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode c = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fator",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // fator ::= valor 
            {
              TreeNode RESULT =null;
		int vlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode vl = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = vl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fator",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // fator ::= variavel 
            {
              TreeNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode v = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fator",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // termo ::= termo operador_multiplicativo fator 
            {
              TreeNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TreeNode t = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int omleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int omright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer om = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode f = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = nodeFactory.makeOperation(om, t, f);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("termo",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // termo ::= fator 
            {
              TreeNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode f = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = f;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("termo",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expressao_aritmetica ::= expressao_aritmetica operador_aditivo termo 
            {
              TreeNode RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TreeNode ea = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer oa = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode t = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = nodeFactory.makeOperation(oa, ea, t);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_aritmetica",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expressao_aritmetica ::= operador_aditivo termo 
            {
              TreeNode RESULT =null;
		int oaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer oa = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode t = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		if (oa == PL747Consts.SUB_OP)
			RESULT = nodeFactory.makeOperation(PL747Consts.MINUS_OP, t, null);
		else 
			RESULT = t;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_aritmetica",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expressao_aritmetica ::= termo 
            {
              TreeNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode t = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = t;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_aritmetica",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expressao_relacional ::= expressao_aritmetica operador_relacional expressao_aritmetica 
            {
              TreeNode RESULT =null;
		int ea1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ea1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TreeNode ea1 = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int orleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int orright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer or = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ea2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ea2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode ea2 = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = nodeFactory.makeOperation(or, ea1, ea2);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_relacional",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expressao_relacional ::= expressao_aritmetica 
            {
              TreeNode RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode ea = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = ea;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_relacional",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expressao_logica ::= expressao_relacional operador_logico expressao_relacional 
            {
              TreeNode RESULT =null;
		int el1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int el1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TreeNode el1 = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int olleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int olright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer ol = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int el2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int el2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode el2 = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = nodeFactory.makeOperation(ol, el1, el2);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_logica",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expressao_logica ::= expressao_relacional 
            {
              TreeNode RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode el = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = el;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao_logica",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expressao ::= expressao_logica 
            {
              TreeNode RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode el = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = el;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expressao ::= atribuicao 
            {
              TreeNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode a = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = a;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // atribuicao ::= variavel ATRIBUTION expressao 
            {
              TreeNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TreeNode v = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode e = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = nodeFactory.makeOperation(PL747Consts.ASSIGN_OP, v, e);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atribuicao",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // lvalor ::= lvalor COMA valor 
            {
              ArrayList RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList lv = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode v = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		lv.add(v);
		RESULT = lv;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lvalor",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // lvalor ::= valor 
            {
              ArrayList RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode v = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		ArrayList lv = new ArrayList<TreeNode>();
		lv.add(v);
		RESULT = lv;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lvalor",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // tupla ::= LBRACE lvalor RBRACE 
            {
              TreeNode RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList lv = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		TreeNode tup = nodeFactory.makeTuple();
		RESULT = this.addChildNodes(tup, lv);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tupla",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // valor ::= BOOLEAN_VALOR 
            {
              TreeNode RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=nodeFactory.makeBoolConstOp(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // valor ::= CHARACTER 
            {
              TreeNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=nodeFactory.makeCharConstOp(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // valor ::= STRING 
            {
              TreeNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=nodeFactory.makeString(s.substring(1,(s.length()-1))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // valor ::= tupla 
            {
              TreeNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode t = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // valor ::= MINUS NUMBER 
            {
              TreeNode RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=nodeFactory.makeIntConstOp("-"+n); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // valor ::= NUMBER 
            {
              TreeNode RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=nodeFactory.makeIntConstOp(n); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // constante ::= CONST IDENTIFICADOR ATRIBUTION valor SEMI 
            {
              TreeNode RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TreeNode v = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		RESULT = nodeFactory.makeConstDef(ident,v);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constante",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // sequencia_campos ::= sequencia_campos tipo_estrutura lista_variaveis SEMI 
            {
              ArrayList RESULT =null;
		int tnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ArrayList tn = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TreeNode t = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList l = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		TreeNode declaration = nodeFactory.makeVarDeclList(t);
		declaration = this.addChildNodes(declaration, l);
		
		tn.add(declaration);
		RESULT = tn;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sequencia_campos",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // sequencia_campos ::= sequencia_campos tipo lista_variaveis SEMI 
            {
              ArrayList RESULT =null;
		int tnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ArrayList tn = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TreeNode t = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList l = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		TreeNode declaration = nodeFactory.makeVarDeclList(t);
		declaration = this.addChildNodes(declaration, l);

		tn.add(declaration);
		RESULT = tn;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sequencia_campos",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // sequencia_campos ::= tipo_estrutura lista_variaveis SEMI 
            {
              ArrayList RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TreeNode t = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList l = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		TreeNode declaration = nodeFactory.makeVarDeclList(t);
		declaration = this.addChildNodes(declaration, l);

		ArrayList tn = new ArrayList<TreeNode>();
		tn.add(declaration);
		RESULT = tn;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sequencia_campos",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // sequencia_campos ::= tipo lista_variaveis SEMI 
            {
              ArrayList RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TreeNode t = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList l = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
		TreeNode declaration = nodeFactory.makeVarDeclList(t);
		declaration = this.addChildNodes(declaration, l);

		ArrayList tn = new ArrayList<TreeNode>();
		tn.add(declaration);
		RESULT = tn;						
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sequencia_campos",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // estrutura ::= STRUCT LBRACE sequencia_campos RBRACE 
            {
              TreeNode RESULT =null;
		int scleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList sc = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		TreeNode estr = nodeFactory.makeStructType();
		RESULT = this.addChildNodes(estr, sc);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estrutura",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // lista_indices ::= lista_indices LBRACKET IDENTIFICADOR RBRACKET 
            {
              ArrayList RESULT =null;
		int lstrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lstrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ArrayList lstr = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int identleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		lstr.add(ident);
		RESULT = lstr;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_indices",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // lista_indices ::= lista_indices LBRACKET NUMBER RBRACKET 
            {
              ArrayList RESULT =null;
		int lstrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lstrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ArrayList lstr = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		lstr.add(n);
		RESULT = lstr;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_indices",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // lista_indices ::= LBRACKET IDENTIFICADOR RBRACKET 
            {
              ArrayList RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		ArrayList str = new ArrayList<String>();
		str.add(ident);
		RESULT = str;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_indices",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // lista_indices ::= LBRACKET NUMBER RBRACKET 
            {
              ArrayList RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
		ArrayList str = new ArrayList<String>();
		str.add(n);
		RESULT = str;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_indices",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // declaracao_variavel ::= IDENTIFICADOR ATRIBUTION expressao 
            {
              TreeNode RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode expr = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
	  	RESULT= nodeFactory.makeVarDecl(ident,expr);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracao_variavel",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declaracao_variavel ::= IDENTIFICADOR 
            {
              TreeNode RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		RESULT= nodeFactory.makeVarDecl(ident,null);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracao_variavel",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // lista_variaveis ::= lista_variaveis COMA declaracao_variavel 
            {
              ArrayList RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList lv = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode d = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		lv.add(d);
		RESULT=lv;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_variaveis",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // lista_variaveis ::= declaracao_variavel 
            {
              ArrayList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode d = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		ArrayList lv = new ArrayList<TreeNode>();
	   	lv.add(d);
	   	RESULT=lv; 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_variaveis",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // tipo_estrutura ::= estrutura lista_indices 
            {
              TreeNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TreeNode e = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList li = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
    	TreeNode p = e;
		ArrayList <String>list = li;
		for(int i = li.size()-1; i >= 0; i--) {
			if (li.get(i) instanceof String) {
				String s;
				s = (String)li.get(i);
				p = nodeFactory.makeVectorType(s,p);
			} 
		}

		RESULT = p;	         
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_estrutura",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // tipo_estrutura ::= estrutura 
            {
              TreeNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode e = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT=e;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_estrutura",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // tipo_primitivo ::= BOOLEAN 
            {
              TreeNode RESULT =null;
		 RESULT=boolType; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_primitivo",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tipo_primitivo ::= VOID 
            {
              TreeNode RESULT =null;
		 RESULT=voidType; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_primitivo",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tipo_primitivo ::= CHAR 
            {
              TreeNode RESULT =null;
		 RESULT=charType; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_primitivo",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tipo_primitivo ::= INT 
            {
              TreeNode RESULT =null;
		 RESULT = intType; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_primitivo",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // tipo ::= tipo_primitivo lista_indices 
            {
              TreeNode RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TreeNode tp = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList li = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		TreeNode p = tp;
		ArrayList <String>list = li;
		for(int i = li.size()-1; i >= 0; i--) {
			if (li.get(i) instanceof String) {
				String s;
				s = (String)li.get(i);
				p = nodeFactory.makeVectorType(s,p);
			} 
		}
		RESULT = p;
   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // tipo ::= tipo_primitivo 
            {
              TreeNode RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode tp = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		RESULT=tp; 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // variaveis ::= tipo_estrutura lista_variaveis SEMI 
            {
              TreeNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TreeNode t = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList l = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		TreeNode declaration = nodeFactory.makeVarDeclList(t);
		RESULT = this.addChildNodes(declaration, l);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variaveis",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // variaveis ::= tipo lista_variaveis SEMI 
            {
              TreeNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TreeNode t = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList l = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
		TreeNode declaration = nodeFactory.makeVarDeclList(t);
		RESULT = this.addChildNodes(declaration, l);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variaveis",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // programa ::= declaracao_funcao_main 
            {
              Object RESULT =null;
		int dfmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dfmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode dfm = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		program.addChild(dfm);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // programa ::= declaracao_funcao 
            {
              Object RESULT =null;
		int dfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode df = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		program.addChild(df);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // programa ::= prototipo_funcao SEMI 
            {
              Object RESULT =null;
		int pfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TreeNode pf = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		program.addChild(pf);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // programa ::= constante 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode c = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		program.addChild(c);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // programa ::= variaveis 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TreeNode v = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		program.addChild(v);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // lista_programa ::= lista_programa programa 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_programa",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lista_programa ::= programa 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_programa",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // $START ::= root_programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TreeNode start_val = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // root_programa ::= NT$0 lista_programa 
            {
              TreeNode RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (TreeNode) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		RESULT = program;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("root_programa",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // NT$0 ::= 
            {
              TreeNode RESULT =null;
 
		init_types();
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

