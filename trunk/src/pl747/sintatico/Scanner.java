/* The following code was generated by JFlex 1.4.1 on 6/10/08 10:05 PM */

package pl747.sintatico;

import java_cup.runtime.Symbol;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 6/10/08 10:05 PM from the specification file
 * <tt>/tmp/ra043614/workspace/sintatico/jflex/Scanner.jflex</tt>
 */
public class Scanner implements java_cup.runtime.Scanner, sym {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  4,  5,  6,  6,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    48, 40, 46, 50, 50, 37, 38, 49, 31, 32,  3, 35, 26, 36, 27,  2, 
    43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 50, 25, 41, 28, 42,  0, 
    50, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
    44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 29, 47, 30,  0, 45, 
     0, 21, 22, 20, 14,  9,  8, 44, 13,  7, 44, 44, 10, 24, 18, 15, 
    44, 44, 16, 11, 17, 19, 23, 12, 44, 44, 44, 33, 39, 34,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\15\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\2\1\1\23\1\24\1\25\1\26"+
    "\2\1\2\0\1\27\6\5\1\30\1\5\1\31\6\5"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\0\1\40"+
    "\2\0\2\41\3\0\1\42\1\43\5\5\1\44\7\5"+
    "\1\45\1\0\1\41\1\0\1\46\4\5\1\47\1\50"+
    "\2\5\1\51\1\52\1\41\1\5\1\53\2\5\1\54"+
    "\1\5\1\55\1\56\1\57\1\5\1\60";

  private static int [] zzUnpackAction() {
    int [] result = new int[114];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\63\0\146\0\63\0\231\0\314\0\377"+
    "\0\u0132\0\u0165\0\u0198\0\u01cb\0\u01fe\0\u0231\0\u0264\0\u0297"+
    "\0\u02ca\0\u02fd\0\63\0\63\0\63\0\u0330\0\63\0\63"+
    "\0\63\0\63\0\63\0\63\0\63\0\63\0\63\0\u0363"+
    "\0\u0396\0\u03c9\0\u03fc\0\u042f\0\u0462\0\u0495\0\u04c8\0\u04fb"+
    "\0\u052e\0\u0132\0\u0561\0\u0594\0\u05c7\0\u05fa\0\u062d\0\u0660"+
    "\0\u0693\0\u06c6\0\u0132\0\u06f9\0\u072c\0\u075f\0\u0792\0\u07c5"+
    "\0\u07f8\0\63\0\63\0\63\0\63\0\63\0\63\0\u0495"+
    "\0\63\0\u082b\0\u085e\0\63\0\u04fb\0\u0891\0\u08c4\0\u08f7"+
    "\0\u0132\0\u0132\0\u092a\0\u095d\0\u0990\0\u09c3\0\u09f6\0\u0132"+
    "\0\u0a29\0\u0a5c\0\u0a8f\0\u0ac2\0\u0af5\0\u0b28\0\u0b5b\0\63"+
    "\0\u0b8e\0\u0891\0\u0bc1\0\u0132\0\u0bf4\0\u0c27\0\u0c5a\0\u0c8d"+
    "\0\u0132\0\u0132\0\u0cc0\0\u0cf3\0\u0132\0\u0132\0\63\0\u0d26"+
    "\0\u0132\0\u0d59\0\u0d8c\0\u0132\0\u0dbf\0\u0132\0\u0132\0\u0132"+
    "\0\u0df2\0\u0132";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[114];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\3\1\2\1\3\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\11\1\14\1\11"+
    "\1\15\1\16\2\11\1\17\1\11\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\11\1\2\1\46\1\2\1\3"+
    "\1\47\1\2\65\0\1\50\1\51\66\0\1\11\1\52"+
    "\11\11\1\53\6\11\22\0\3\11\14\0\10\11\1\54"+
    "\5\11\1\55\3\11\22\0\3\11\14\0\3\11\1\56"+
    "\16\11\22\0\3\11\14\0\22\11\22\0\3\11\14\0"+
    "\12\11\1\57\7\11\22\0\3\11\14\0\6\11\1\60"+
    "\13\11\22\0\3\11\14\0\10\11\1\61\11\11\22\0"+
    "\3\11\14\0\2\11\1\62\17\11\22\0\3\11\14\0"+
    "\10\11\1\63\1\64\10\11\22\0\3\11\14\0\6\11"+
    "\1\65\1\11\1\66\11\11\22\0\3\11\14\0\10\11"+
    "\1\67\11\11\22\0\3\11\14\0\10\11\1\70\11\11"+
    "\22\0\3\11\14\0\16\11\1\71\3\11\22\0\3\11"+
    "\41\0\1\72\74\0\1\73\63\0\1\74\47\0\1\75"+
    "\62\0\1\76\62\0\1\77\101\0\1\45\7\0\56\100"+
    "\1\101\4\100\2\0\2\102\3\0\22\102\3\0\13\102"+
    "\1\0\1\102\2\0\3\102\1\0\1\103\3\102\4\50"+
    "\1\104\2\105\54\50\2\51\1\106\1\107\1\110\56\51"+
    "\7\0\12\11\1\111\7\11\22\0\3\11\14\0\11\11"+
    "\1\112\10\11\22\0\3\11\14\0\3\11\1\113\16\11"+
    "\22\0\3\11\14\0\4\11\1\114\15\11\22\0\3\11"+
    "\14\0\11\11\1\115\10\11\22\0\3\11\14\0\1\116"+
    "\21\11\22\0\3\11\14\0\5\11\1\117\14\11\22\0"+
    "\3\11\14\0\1\11\1\120\10\11\1\121\7\11\22\0"+
    "\3\11\14\0\14\11\1\122\5\11\22\0\3\11\14\0"+
    "\16\11\1\123\3\11\22\0\3\11\14\0\13\11\1\124"+
    "\6\11\22\0\3\11\14\0\10\11\1\125\11\11\22\0"+
    "\3\11\14\0\1\126\21\11\22\0\3\11\14\0\1\127"+
    "\21\11\22\0\3\11\66\0\1\130\22\0\2\102\34\0"+
    "\1\102\3\0\3\106\1\131\1\0\56\106\2\51\1\132"+
    "\1\107\1\110\56\51\2\110\1\0\1\133\57\110\7\0"+
    "\4\11\1\122\15\11\22\0\3\11\14\0\2\11\1\134"+
    "\17\11\22\0\3\11\14\0\14\11\1\135\5\11\22\0"+
    "\3\11\14\0\3\11\1\136\16\11\22\0\3\11\14\0"+
    "\13\11\1\137\6\11\22\0\3\11\14\0\14\11\1\140"+
    "\5\11\22\0\3\11\14\0\2\11\1\141\17\11\22\0"+
    "\3\11\14\0\11\11\1\142\10\11\22\0\3\11\14\0"+
    "\4\11\1\143\15\11\22\0\3\11\14\0\3\11\1\144"+
    "\16\11\22\0\3\11\14\0\7\11\1\145\12\11\22\0"+
    "\3\11\14\0\13\11\1\146\6\11\22\0\3\11\5\0"+
    "\2\106\1\132\1\131\1\0\56\106\2\110\1\147\1\133"+
    "\57\110\7\0\15\11\1\150\4\11\22\0\3\11\14\0"+
    "\2\11\1\151\17\11\22\0\3\11\14\0\12\11\1\152"+
    "\7\11\22\0\3\11\14\0\11\11\1\153\10\11\22\0"+
    "\3\11\14\0\12\11\1\154\7\11\22\0\3\11\14\0"+
    "\2\11\1\155\17\11\22\0\3\11\14\0\12\11\1\156"+
    "\7\11\22\0\3\11\14\0\10\11\1\157\11\11\22\0"+
    "\3\11\14\0\13\11\1\160\6\11\22\0\3\11\14\0"+
    "\16\11\1\161\3\11\22\0\3\11\14\0\13\11\1\162"+
    "\6\11\22\0\3\11\5\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3621];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\1\1\1\11\15\1\3\11\1\1\11\11"+
    "\10\1\1\2\1\0\20\1\6\11\1\0\1\11\2\0"+
    "\1\15\1\7\3\0\17\1\1\11\1\0\1\1\1\0"+
    "\13\1\1\11\13\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[114];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	private Symbol symbol(int sym) {
		return new Symbol(sym, yyline+1, yycolumn+1);
	}
  
	private Symbol symbol(int sym, Object val) {
		return new Symbol(sym, yyline+1, yycolumn+1, val);
	}
  
	private void error(String message) {
		System.err.println("Lexic error");
		System.err.println("Error at line "+(yyline+1)+", column "+(yycolumn+1)+" : "+message);
	}
  


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;
    int zzPushbackPosL = zzPushbackPos = -1;
    boolean zzWasPushback;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;

      zzWasPushback = false;

      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            zzPushbackPos = zzPushbackPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            zzPushbackPosL = zzPushbackPos;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 2) == 2 )
            zzPushbackPosL = zzCurrentPosL;

          if ( (zzAttributes & 1) == 1 ) {
            zzWasPushback = (zzAttributes & 4) == 4;
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;
      if (zzWasPushback)
        zzMarkedPos = zzPushbackPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 47: 
          { return symbol(RETURN);
          }
        case 49: break;
        case 17: 
          { return symbol(MINUS);
          }
        case 50: break;
        case 46: 
          { return symbol(DOWNTO);
          }
        case 51: break;
        case 8: 
          { return symbol(DOT);
          }
        case 52: break;
        case 16: 
          { return symbol(PLUS);
          }
        case 53: break;
        case 1: 
          { System.err.println("Illegal character: "+yytext());System.exit(1);
          }
        case 54: break;
        case 44: 
          { return symbol(CONST);
          }
        case 55: break;
        case 21: 
          { return symbol(MORE);
          }
        case 56: break;
        case 20: 
          { return symbol(LESS);
          }
        case 57: break;
        case 2: 
          { /* ignore white space. */
          }
        case 58: break;
        case 41: 
          { return symbol(VOID);
          }
        case 59: break;
        case 12: 
          { return symbol(LPAREN);
          }
        case 60: break;
        case 45: 
          { return symbol(STRUCT);
          }
        case 61: break;
        case 30: 
          { return symbol(LEQUAL);
          }
        case 62: break;
        case 42: 
          { return symbol(MAIN);
          }
        case 63: break;
        case 38: 
          { return symbol(ELSE);
          }
        case 64: break;
        case 31: 
          { return symbol(MEQUAL);
          }
        case 65: break;
        case 15: 
          { return symbol(RBRACE);
          }
        case 66: break;
        case 34: 
          { return symbol(INT);
          }
        case 67: break;
        case 24: 
          { return symbol(DO);
          }
        case 68: break;
        case 32: 
          { return symbol(STRING, new String(yytext()));
          }
        case 69: break;
        case 19: 
          { return symbol(NOT);
          }
        case 70: break;
        case 27: 
          { return symbol(AND);
          }
        case 71: break;
        case 29: 
          { return symbol(NEQUAL);
          }
        case 72: break;
        case 7: 
          { return symbol(COMA);
          }
        case 73: break;
        case 40: 
          { return symbol(CHAR);
          }
        case 74: break;
        case 23: 
          { return symbol(IF);
          }
        case 75: break;
        case 22: 
          { return symbol(NUMBER, new String(yytext()));
          }
        case 76: break;
        case 6: 
          { return symbol(SEMI);
          }
        case 77: break;
        case 37: 
          { return symbol(CHARACTER, new String(yytext()));
          }
        case 78: break;
        case 18: 
          { return symbol(MOD);
          }
        case 79: break;
        case 28: 
          { return symbol(OR);
          }
        case 80: break;
        case 3: 
          { return symbol(DIVIDE);
          }
        case 81: break;
        case 10: 
          { return symbol(LBRACKET);
          }
        case 82: break;
        case 5: 
          { return symbol(IDENTIFICADOR, new String(yytext()));
          }
        case 83: break;
        case 13: 
          { return symbol(RPAREN);
          }
        case 84: break;
        case 4: 
          { return symbol(TIMES);
          }
        case 85: break;
        case 36: 
          { return symbol(REF);
          }
        case 86: break;
        case 35: 
          { return symbol(FOR);
          }
        case 87: break;
        case 43: 
          { return symbol(WHILE);
          }
        case 88: break;
        case 26: 
          { return symbol(EQUAL);
          }
        case 89: break;
        case 14: 
          { return symbol(LBRACE);
          }
        case 90: break;
        case 11: 
          { return symbol(RBRACKET);
          }
        case 91: break;
        case 39: 
          { return symbol(BOOLEAN_VALOR,new String(yytext()));
          }
        case 92: break;
        case 48: 
          { return symbol(BOOLEAN);
          }
        case 93: break;
        case 33: 
          { /* ignore comments. */
          }
        case 94: break;
        case 25: 
          { return symbol(TO);
          }
        case 95: break;
        case 9: 
          { return symbol(ATRIBUTION);
          }
        case 96: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { 	return symbol(EOF);
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
